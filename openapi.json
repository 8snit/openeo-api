{
  "openapi": "3.0.0",
  "info": {
    "title": "OpenEO API",
    "version": "0.0.1",
    "description": "The OpenEO API specification for interoperable cloud-based processing of large Earth observation datasets. **This early draft version is incomplete and intended for working on a prototype and a proof of concept.** Things that are currently missing particularly include: \n * Authentication and authorization with OAuth 2.0, \n * how results of computations can be downloaded, \n * how data is streamed into UDFs and how the output of UDFs is returned, \n * how services are organized as microservices, \n * how users keep track of their costs, \n and \n * how OpenSearch is interfaced",
    "contact": {
      "url": "http://openeo.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://localhost/openeo/api/v0",
      "description": "demonstration and development server"
    }
  ],
  "tags": [
    {
      "name": "API Information",
      "description": "General services about the API implementation at a specific back-end"
    },
    {
      "name": "EO Data Discovery",
      "description": "Discovery of Earth observation datasets that are available at the back-end"
    },
    {
      "name": "Process Discovery",
      "description": "Discovery of processes that are available at the back-end"
    },
    {
      "name": "UDF",
      "description": "Interfacing end executing user-defined functions at the back-end."
    },
    {
      "name": "User Content",
      "description": "Services working with of user content"
    },
    {
      "name": "Authentication",
      "description": "Authentication of users"
    },
    {
      "name": "Job Management",
      "description": "Organization of processing jobs that have been submitted to the back-end"
    },
    {
      "name": "Data Download",
      "description": "Services for downloading different types of job results"
    }
  ],
  "components": {
    "responses": {
      "auth_required": {
        "description": "The back-end requires clients to authenticate in order to process this request."
      },
      "not_implemented": {
        "description": "This API feature is not supported by the back-end."
      },
      "access_denied": {
        "description": "Authorization failed, access to the requested resource has been denied."
      },
      "unavailable": {
        "description": "The service is currently unavailable."
      }
    },
    "parameters": {
      "user_id": {
        "name": "user_id",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "description": "user identifier, the special value `me` automatically refers to the own ID based on the provided HTTP `Authorization` header.",
        "required": true
      }
    },
    "schemas": {
      "process_description": {
        "description": "Defines and describes a process including it's expected input arguments. Arguments ",
        "type": "object",
        "required": [
          "process_id",
          "description"
        ],
        "properties": {
          "process_id": {
            "type": "string",
            "description": "The unique identifier of the process."
          },
          "description": {
            "type": "string",
            "description": "A short and concise description of what the process does and how the output looks like."
          },
          "link": {
            "type": "string",
            "description": "Reference to an external process definition if the process has been defined over different back ends within OpenEO"
          },
          "args": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "required": [
                "description"
              ],
              "properties": {
                "description": {
                  "type": "string",
                  "description": "A short and concise description of the process argument."
                },
                "required": {
                  "type": "boolean",
                  "default": true,
                  "description": "Defines whether an argument is required or optional."
                }
              }
            }
          }
        },
        "example": {
          "process_id": "band_arithmetic",
          "description": "Perform basic arithmetic expressions on individual pixel and their band values.",
          "args": {
            "imagery": {
              "description": "input image or image collection",
              "required": true
            },
            "expr": {
              "description": "expressions as array, the result will have as many bands as the number of given expressions."
            }
          }
        }
      },
      "udf_schema_description": {
        "description": "Defines and describes a UDF using the same schema as the description of processes offered by the back-end.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/process_description"
          }
        ],
        "example": {
          "process_id": "udf/R/reduce_time",
          "description": "Applies an R function independently over all input time series that produces a zero-dimensional value (scalar or multi-band tuple) as output (per time series).",
          "args": {
            "imagery": {
              "description": "input (image) time series",
              "required": true
            },
            "script": {
              "description": "Script resource that has been uploaded to user space before. ",
              "required": true
            }
          }
        }
      },
      "task": {
        "description": "A task combines an executable processing graph and optional parameters on spatial and temporal resolution, window, and resampling method. These can be used to run processes on small subsets of the original data e.g. in interactively developing processing workflows.",
        "type": "object",
        "required": [
          "process_graph"
        ],
        "properties": {
          "process_graph": {
            "$ref": "#/components/schemas/process_graph"
          },
          "space_view": {
            "$ref": "#/components/schemas/space_view"
          },
          "time_view": {
            "$ref": "#/components/schemas/time_view"
          }
        }
      },
      "process_graph": {
        "description": "A process graph defines an executable process, i.e. one process or a combination of chained processes including specific arguments.",
        "type": "object",
        "required": [
          "process_id"
        ],
        "properties": {
          "process_id": {
            "type": "string",
            "description": "The unique identifier of the process."
          },
          "args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/arg_set"
            },
            "description": "Collection of arguments identified by their name."
          }
        },
        "example": {
          "process_id": "median_time",
          "args": {
            "imagery": {
              "process_id": "NDVI",
              "args": {
                "imagery": {
                  "process_id": "filter_daterange",
                  "args": {
                    "imagery": {
                      "product_id": "Sentinel2A-L1C"
                    }
                  },
                  "from": "2017-01-01",
                  "to": "2017-01-31"
                }
              },
              "red": "4",
              "nir": "8"
            }
          }
        }
      },
      "arg_set": {
        "description": "Defines an object schema for collection (uniquely named) arguments as input to processes.",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/arg_value"
        }
      },
      "arg_value": {
        "description": "Defines the schema for valid argument values that can be either a scalar value (string, number, integer, boolean), a product identifier, another task to allow process chaining, or an array of the aforementioned types.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/task"
          },
          {
            "type": "object",
            "properties": {
              "product_id": {
                "type": "string"
              }
            },
            "required": [
              "product_id"
            ],
            "description": "If the argument refers to an EO dataset provided by the back-end, this object specifies the unqiue identifier of the product.",
            "additionalProperties": true
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/arg_value"
            },
            "description": "Argument values can be arrays of scalars, input datasets, and tasks,"
          },
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "integer"
          },
          {
            "type": "boolean"
          }
        ]
      },
      "job": {
        "description": "Defines metadata of processing jobs that have been submitted by users.",
        "type": "object",
        "required": [
          "job_id",
          "status",
          "task",
          "user_id"
        ],
        "properties": {
          "job_id": {
            "type": "string",
            "description": "Unique identifier of a job that is generated by the back-end during job submission."
          },
          "status": {
            "type": "string",
            "enum": [
              "submitted",
              "running",
              "finished",
              "canceled",
              "error",
              "unknown"
            ],
            "description": "The current status of the job."
          },
          "task": {
            "$ref": "#/components/schemas/task"
          },
          "space_view": {
            "$ref": "#/components/schemas/space_view"
          },
          "time_view": {
            "$ref": "#/components/schemas/space_view"
          },
          "submitted": {
            "type": "string",
            "format": "dateTime",
            "description": "Date and time of job submission"
          },
          "last_update": {
            "type": "string",
            "format": "dateTime",
            "description": "Date and time of last status change"
          },
          "user_id": {
            "type": "string",
            "description": "Identifier of the user, who submitted the job and pays incurred costs if needed."
          }
        },
        "additionalProperties": true,
        "example": {
          "job_id": "748df7caa8c84a7ff6e",
          "user_id": "bd6f9faf93b4",
          "status": "scheduled",
          "task": {
            "process_id": "filter_daterange",
            "args": [
              {
                "A": {
                  "product_id": "Sentinel2A-L1C"
                }
              },
              {
                "from": "2017-01-01"
              },
              {
                "to": "2017-01-31"
              }
            ]
          },
          "submitted": "2017-01-01 09:32:12",
          "last_update": "2017-01-01 09:36:18"
        }
      },
      "space_view": {
        "description": "Defines spatial resolution, window, and resampling method used for running processes on small sub datasets",
        "type": "object",
        "properties": {
          "srs": {
            "type": "string",
            "description": "Spatial reference system as proj4 string or epsg code such as `'EPSG:3857'`"
          },
          "window": {
            "type": "object",
            "description": "boundaries of the spatial window as coordinates expressed in the given reference system.",
            "required": [
              "left",
              "top",
              "right",
              "bottom"
            ],
            "properties": {
              "left": {
                "type": "number"
              },
              "top": {
                "type": "number"
              },
              "right": {
                "type": "number"
              },
              "bottom": {
                "type": "number"
              }
            }
          },
          "resolution": {
            "type": "number"
          },
          "resampling": {
            "type": "string",
            "description": "resampling method to use (taken from [GDAL](http://www.gdal.org/gdal_translate.html))",
            "default": "nearest",
            "enum": [
              "nearest",
              "bilinear",
              "cubic",
              "cubicspline",
              "lanczos",
              "average",
              "mode"
            ]
          }
        },
        "example": {
          "srs": "EPSG:4326",
          "window": {
            "left": -10.21,
            "top": 53.23,
            "right": 12.542,
            "bottom": 12.32
          },
          "resolution": 0.25,
          "resampling": "nearest"
        }
      },
      "time_view": {
        "description": "Defines temporal resolution, window, and resampling method used for running processes on small sub datasets",
        "type": "object",
        "properties": {
          "window": {
            "type": "object",
            "description": "Start and end date in ISO 8601 format",
            "required": [
              "start",
              "end"
            ],
            "properties": {
              "start": {
                "type": "string",
                "format": "dateTime"
              },
              "end": {
                "type": "string",
                "format": "dateTime"
              }
            }
          },
          "resolution": {
            "type": "string",
            "description": "temporal resolution given as ISO 8601 time period"
          },
          "resampling": {
            "type": "string",
            "description": "resampling method to use (taken from [GDAL](http://www.gdal.org/gdal_translate.html))",
            "default": "nearest",
            "enum": [
              "nearest",
              "bilinear",
              "cubic",
              "cubicspline",
              "lanczos",
              "average",
              "mode"
            ]
          }
        },
        "example": {
          "window": {
            "start": "2017-01-01",
            "end": "2018-01-01"
          },
          "resolution": "P1M",
          "resampling": "nearest"
        }
      }
    }
  },
  "paths": {
    "/capabilities": {
      "get": {
        "summary": "Returns the capabilities, i.e., which OpenEO API features are supported  by the back-end.",
        "description": "The request will ask the back-end which features of the OpenEO API are supported and return a simple JSON description with available endpoints.",
        "tags": [
          "API Information"
        ],
        "responses": {
          "200": {
            "description": "An array of implemented API endpoints",
            "content": {
              "application/json": {
                "example": [
                  "/eodata",
                  "/eodata/{product_id}",
                  "/processes"
                ]
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "get": {
        "summary": "Check whether a user is registered at the back-end.  ",
        "description": "This request simply checks whether the provided HTTP `Authorization` header refers to a valid user at the back-end and returns his/her internal user ID. It is not needed to call login before sending any other API request, which will also expect the HTTP `Authorization` header if needed. Back-ends that do not require authentication such as a local file-based implementation may always return a generic user ID such as `'me'`.",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "User ID of the user that refers to the provided HTTP `Authorization` header. ",
            "content": {
              "text/plain; charset=utf-8": {
                "schema": {
                  "type": "string"
                },
                "example": "fabe2acbd36ff7a"
              }
            }
          },
          "404": {
            "description": "Login failed"
          }
        }
      }
    },
    "/eodata": {
      "get": {
        "summary": "Returns basic information about EO datasets that are available at the back-end and offers simple search by time, space, and product name.",
        "description": "Requests will ask the back-end for available data and will return an array of available datasets with very basic information such as their unique identifiers. Results can be filtered by space, time, and product name with very simple search expressions.",
        "tags": [
          "EO Data Discovery"
        ],
        "parameters": [
          {
            "name": "qname",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "allowReserved": true,
            "description": "string expression to search available datasets by name",
            "required": false
          },
          {
            "name": "qgeom",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "WKT polygon to search for available datasets that spatially intersect with the polygon",
            "required": false
          },
          {
            "name": "qstartdate",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "ISO 8601 date/time string to find datasets with any data acquired after the given date/time",
            "required": false
          },
          {
            "name": "qenddate",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "ISO 8601 date/time string to find datasets with any data acquired before the given date/time",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "An array of EO datasets including their unique identifiers and some basic metadata.",
            "content": {
              "application/json": {
                "example": [
                  {
                    "product_id": "MOD09Q1",
                    "description": " MODIS/Terra Surface Reflectance 8-Day L3 Global 250m SIN Grid V006",
                    "source": "U.S. Geological Survey (USGS), DOI: 10.5067/MODIS/MOD09Q1.006"
                  },
                  {
                    "product_id": "SENTINEL2-1C",
                    "description": "Sentinel 2 Level-1C: Top-of-atmosphere reflectances in cartographic geometry",
                    "source": "European Space Agency (ESA)"
                  },
                  {
                    "product_id": "LandsatETM+",
                    "description": "Landsat Enhanced Thematic Mapper Plus (ETM+)",
                    "source": "U.S. Geological Survey (USGS)"
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/eodata/opensearch": {
      "get": {
        "summary": "OpenSearch endpoint to receive standardized data search results.",
        "description": "This service offers more complex search functionality and returns results in an OpenSearch compliant RSS XML format.",
        "tags": [
          "EO Data Discovery"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "allowReserved": true,
            "description": "string expression to search available datasets",
            "required": false
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "page start value",
            "required": false
          },
          {
            "name": "rows",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "page size value",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "An array of EO datasets including their unique identifiers and some basic metadata.",
            "content": {
              "application/rss+xml": {}
            }
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/eodata/{product_id}": {
      "get": {
        "summary": "Returns further information on a given EO product available at the back-end.",
        "description": "The request will ask the back-end for further details about a product specified by identifier",
        "tags": [
          "EO Data Discovery"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "product identifier string such as `'MOD18Q1'`",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object with metadata of the EO dataset.",
            "content": {
              "application/json": {
                "example": {
                  "product_id": "Sentinel-2A-L1C",
                  "description": "Sentinel 2 Level-1C: Top-of-atmosphere reflectances in cartographic geometry",
                  "source": "European Space Agency (ESA)",
                  "extent": [
                    -34,
                    35,
                    39,
                    71
                  ],
                  "time": [
                    "2016-01-01",
                    "2017-10-01"
                  ],
                  "bands": [
                    {
                      "band_id": "1",
                      "wavelength_nm": 443.9,
                      "res_m": 60
                    },
                    {
                      "band_id": "2",
                      "name": "blue",
                      "wavelength_nm": 496.6,
                      "res_m": 10
                    },
                    {
                      "band_id": "3",
                      "name": "green",
                      "wavelength_nm": 560,
                      "res_m": 10
                    },
                    {
                      "band_id": "4",
                      "name": "red",
                      "wavelength_nm": 664.5,
                      "res_m": 10
                    },
                    {
                      "band_id": "5",
                      "wavelength_nm": 703.9,
                      "res_m": 20
                    },
                    {
                      "band_id": "6",
                      "wavelength_nm": 740.2,
                      "res_m": 20
                    },
                    {
                      "band_id": "7",
                      "wavelength_nm": 782.5,
                      "res_m": 20
                    },
                    {
                      "band_id": "8",
                      "name": "nir",
                      "wavelength_nm": 835.1,
                      "res_m": 10
                    },
                    {
                      "band_id": "8a",
                      "wavelength_nm": 864.8,
                      "res_m": 20
                    },
                    {
                      "band_id": "9",
                      "wavelength_nm": 945,
                      "res_m": 60
                    },
                    {
                      "band_id": "10",
                      "wavelength_nm": 1373.5,
                      "res_m": 60
                    },
                    {
                      "band_id": "11",
                      "wavelength_nm": 1613.7,
                      "res_m": 20
                    },
                    {
                      "band_id": "12",
                      "wavelength_nm": 2202.4,
                      "res_m": 20
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "404": {
            "description": "EO dataset with specified identifier is not available"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/processes": {
      "get": {
        "summary": "Returns processes supported by the back-end",
        "description": "The request will ask the back-end for available processes and will return an array of available processes with their unique identifiers and description",
        "tags": [
          "Process Discovery"
        ],
        "parameters": [
          {
            "name": "qname",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "string expression to search for available processes by name",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "An array of EO processes including their unique identifiers and a description.",
            "content": {
              "application/json": {
                "example": [
                  {
                    "process_id": "NDVI",
                    "description": "Computes the normalized difference vegetation index (NDVI) for all pixels of the input dataset."
                  },
                  {
                    "process_id": "median_time",
                    "description": "Applies median aggregation to pixel time series for all bands of the input dataset."
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/processes/opensearch": {
      "get": {
        "summary": "OpenSearch endpoint to request standardized process search results.",
        "description": "This service offers more complex search functionality and returns results in an OpenSearch compliant RSS XML format.",
        "tags": [
          "Process Discovery"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "allowReserved": true,
            "description": "string expression to search available processes",
            "required": false
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "page start value",
            "required": false
          },
          {
            "name": "rows",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "page size value",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OpenSearch response",
            "content": {
              "application/rss+xml": {}
            }
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/processes/{process_id}": {
      "get": {
        "summary": "Returns further information on a given EO process available at the back-end.",
        "description": "The request will ask the back-end for further details about a process specified by identifier",
        "tags": [
          "Process Discovery"
        ],
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "process identifier string such as 'NDVI'",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object with metadata of the EO process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/process_description"
                },
                "example": {
                  "process_id": "median_time",
                  "description": "Applies median aggregation to pixel time series for all bands of the input dataset.",
                  "args": {
                    "A": {
                      "description": "input product (time series)"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "404": {
            "description": "Process with specified identifier is not available"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/jobs": {
      "post": {
        "summary": "submits a new job to the back-end",
        "description": "creates a new job from one or more (chained) processes at the back-end, which will eventually run the computations",
        "tags": [
          "Job Management"
        ],
        "requestBody": {
          "description": "Description of one or more (chained) processes including their input arguments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unique job identifier",
            "content": {
              "application/json": {
                "example": {
                  "job_id": "42d5k3nd92mk49dmj294md"
                }
              }
            }
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/jobs/{job_id}": {
      "get": {
        "summary": "Returns information about a submitted job",
        "description": "Returns detailed information about a submitted job including its current status and the underlying task",
        "tags": [
          "Job Management"
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "job identifier string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object with job information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "403": {
            "$ref": "#/components/responses/access_denied"
          },
          "404": {
            "description": "Job with specified identifier is not available"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      },
      "delete": {
        "summary": "Deletes a submitted job",
        "description": "Deleting a job  will cancel execution at the back-end regardless of its status. For finished jobs, this will also delete resulting data.",
        "tags": [
          "Job Management"
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "job identifier string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object with job information.",
            "content": {
              "application/json": {
                "example": {
                  "job_id": "42d5k3nd92mk49dmj294md",
                  "status": "scheduled",
                  "task": {
                    "process_graph": {
                      "process_id": "slope",
                      "args": {
                        "dem": {
                          "process_id": "filter_bbox",
                          "args": {
                            "imagery": "/eodata/srtm90m",
                            "srs": "EPSG:4326",
                            "left": 6.301,
                            "right": 7.232,
                            "top": 53.87,
                            "bottom": 50.223
                          }
                        }
                      }
                    }
                  },
                  "submitted": "2017-01-01 09:32:12",
                  "user_id": "ab32e5f3a2bc2847s2"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "403": {
            "$ref": "#/components/responses/access_denied"
          },
          "404": {
            "description": "Job with specified identifier is not available"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/jobs/{job_id}/subscribe": {
      "get": {
        "summary": "Subscribes to job execution updates that are communicated over WebSockets",
        "description": "THE PROTOCOL FOR COMMUNICATION OF JOB UPDATES IS TO BE DEFINED.",
        "tags": [
          "Job Management"
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "job identifier string",
            "required": true
          },
          {
            "name": "Upgrade",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "websocket"
              ]
            },
            "description": "WebSocket handshake request header",
            "required": true
          },
          {
            "name": "Connection",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "Upgrade"
              ]
            },
            "description": "WebSocket handshake request header",
            "required": true
          },
          {
            "name": "Sec-WebSocket-Key",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "WebSocket handshake request header",
            "required": true
          },
          {
            "name": "Sec-WebSocket-Protocol",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "job_subscribe"
              ]
            },
            "description": "WebSocket handshake request header",
            "required": true
          },
          {
            "name": "Sec-WebSocket-Version",
            "in": "header",
            "schema": {
              "type": "number",
              "enum": [
                13
              ]
            },
            "description": "WebSocket handshake request header",
            "required": true
          }
        ],
        "responses": {
          "101": {
            "description": "Successful subscription to job updates returns in a protocol change to a web socket connection."
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "403": {
            "$ref": "#/components/responses/access_denied"
          },
          "404": {
            "description": "Job with specified identifier is not available"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/download/wcs/{job_id}": {
      "get": {
        "summary": "WCS compliant endpoint to download job results",
        "description": "This request will ask the back-end to fetch job result data as a WCS service.",
        "tags": [
          "Data Download"
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "job identifier string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A valid WCS response"
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "403": {
            "$ref": "#/components/responses/access_denied"
          },
          "404": {
            "description": "Job with specified identifier is not available"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/users/{user_id}/files": {
      "get": {
        "summary": "List user-uploaded files",
        "description": "This service lists all user-uploaded files that are stored at the back-end",
        "tags": [
          "User Content"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Flattened file tree with path relative to the user's root directory and some basic properties such as file size.",
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "test.txt",
                    "size": 182
                  },
                  {
                    "name": "test.tif",
                    "size": 183142
                  },
                  {
                    "name": "Sentinel2/S2A_MSIL1C_20170819T082011_N0205_R121_T34KGD_20170819T084427.zip",
                    "size": 4183353142
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "403": {
            "$ref": "#/components/responses/access_denied"
          },
          "404": {
            "description": "Job with specified identifier is not available"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/users/{user_id}/files/{path}": {
      "get": {
        "summary": "Download a user file",
        "description": "This service downloads a user files identified by its path relative to the user's root directory.",
        "tags": [
          "User Content"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          },
          {
            "name": "path",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "path relative to the user's root directory, must be URL encoded",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "file from user storage",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "403": {
            "$ref": "#/components/responses/access_denied"
          },
          "404": {
            "description": "File with specified path is not available"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      },
      "put": {
        "summary": "Upload a new or update an existing user file",
        "description": "This service uploads a new or updates an existing file at a given path.",
        "tags": [
          "User Content"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          },
          {
            "name": "path",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "path relative to the user's root directory, must be URL encoded",
            "required": true
          }
        ],
        "requestBody": {
          "description": "file to be uploaded",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The file upload has been successful."
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "403": {
            "$ref": "#/components/responses/access_denied"
          },
          "404": {
            "description": "File with specified path is not available"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      },
      "delete": {
        "summary": "Deletes a user file",
        "description": "This service deletes an existing user-uploaded file specified by its path.",
        "tags": [
          "User Content"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          },
          {
            "name": "path",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "path relative to the user's root directory, must be URL encoded",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The file has been successfully deleted at the back-end."
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "403": {
            "$ref": "#/components/responses/access_denied"
          },
          "404": {
            "description": "File with specified path is not available"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/users/{user_id}/jobs": {
      "get": {
        "summary": "List all jobs that have been submitted by the user",
        "description": "Requests to this service will list all jobs submitted by a user with given id.",
        "tags": [
          "Job Management",
          "User Content"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of job descriptions",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Array of job descriptions",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/job"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "403": {
            "$ref": "#/components/responses/access_denied"
          },
          "404": {
            "description": "Job with specified identifier is not available"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/udf": {
      "get": {
        "summary": "Describe how custom user-defined functions can be exposed to the data and which languages are supported by the back-end.",
        "tags": [
          "UDF"
        ],
        "responses": {
          "200": {
            "description": "Description of UDF support",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "A map with language identifiers such as `'R'`as keys and an object that defines available versions, extension packages, and UDF schemas.",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "udf_schemas": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "description": "These strings define how UDFs can be exposed to the data, how they can be parallelized, and how the result schema should be shaped.",
                            "enum": [
                              "reduce_time",
                              "reduce_space",
                              "apply_pixel",
                              "apply_scene",
                              "window_time",
                              "window_space",
                              "window_spacetime",
                              "rescale_time",
                              "rescale_space",
                              "rescale_spacetime"
                            ]
                          }
                        },
                        "versions": {
                          "type": "object",
                          "description": "A map with version identifiers as keys and an object value that specifies which extension packages are available for the particular version.",
                          "additionalProperties": {
                            "description": "Extension package identifiers that should include their version number such as `'sf__0.5-4'`",
                            "properties": {
                              "packages": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "R": {
                      "udf_schemas": [
                        "reduce_time",
                        "reduce_space",
                        "apply_pixel"
                      ],
                      "versions": {
                        "3.1.0": {
                          "packages": [
                            "Rcpp_0.12.10",
                            "sp_1.2-5",
                            "rmarkdown_1.6"
                          ]
                        },
                        "3.3.3": {
                          "packages": [
                            "Rcpp_0.12.10",
                            "sf_0.5-4",
                            "spacetime_1.2-0"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "403": {
            "$ref": "#/components/responses/access_denied"
          },
          "404": {
            "description": "Job with specified identifier is not available"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    },
    "/udf/{lang}/{udf_schema}": {
      "get": {
        "summary": "Returns the process description of UDF schemas, which offer different possibilities how user-defined scripts can be applied to the data.",
        "tags": [
          "UDF"
        ],
        "parameters": [
          {
            "name": "lang",
            "in": "path",
            "description": "Language identifier such as `'R'`",
            "schema": {
              "type": "string",
              "enum": [
                "python",
                "R"
              ]
            },
            "required": true
          },
          {
            "name": "udf_schema",
            "in": "path",
            "description": "The UDF schema defines how UDFs can be exposed to the data, how they can be parallelized, and how the result schema should be shaped.",
            "schema": {
              "type": "string",
              "enum": [
                "reduce_time",
                "reduce_space",
                "apply_pixel",
                "apply_scene",
                "window_time",
                "window_space",
                "window_spacetime",
                "rescale_time",
                "rescale_space",
                "rescale_spacetime"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Process description",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/udf_schema_description"
                },
                "example": {
                  "process_id": "/udf/R/reduce_time",
                  "description": "Applies the given R script on all time series of the input imagery. The R script gets pixel values (all bands) of complete time series as input and must result in a single value or tuple for multiple bands.",
                  "args": {
                    "imagery": {
                      "description": "input image time series"
                    },
                    "script": {
                      "description": "R script that will be applied over time series"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/auth_required"
          },
          "403": {
            "$ref": "#/components/responses/access_denied"
          },
          "404": {
            "description": "Job with specified identifier is not available"
          },
          "501": {
            "$ref": "#/components/responses/not_implemented"
          },
          "503": {
            "$ref": "#/components/responses/unavailable"
          }
        }
      }
    }
  }
}