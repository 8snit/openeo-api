[
  {
    "id": "absolute",
    "summary": "Absolute value",
    "description": "Computes the absolute value of a real number `x`, which is the \"unsigned\" portion of x and often denoted as *|x|*.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math"
    ],
    "parameters": {
      "x": {
        "description": "A number.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed absolute value.",
      "schema": {
        "type": [
          "number",
          "null"
        ],
        "minimum": 0
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      },
      {
        "arguments": {
          "x": 3.5
        },
        "returns": 3.5
      },
      {
        "arguments": {
          "x": -0.4
        },
        "returns": 0.4
      },
      {
        "arguments": {
          "x": -3.5
        },
        "returns": 3.5
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/AbsoluteValue.html",
        "title": "Absolute value explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "add_dimension",
    "summary": "Adds a new dimension with the name in `dimension`.",
    "description": "Adds a new dimension with the name in `dimension`.",
    "categories": [
      "cubes"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "dimension": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "dimension_value": {
        "description": "",
        "schema": {
          "description": "Any data type is allowed."
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "aggregate_temporal",
    "summary": "Temporal aggregations",
    "description": "Computes a temporal aggregation based on an array of date/datetime ranges. Will be projected to the labels. Length of labels and groups needs to be the same. All data along the dimensions will be passed through the reducer. Calendar hierarchies such as year, month, week etc. will be transformed from the clients into groups.",
    "categories": [
      "cubes",
      "aggregate"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "groups": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": true
      },
      "labels": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "required": true
      },
      "reducer": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      },
      "dimension": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "aggregate_zonal",
    "summary": "Zonal statistics for polygons",
    "description": "Aggregates zonal data/statistics for one or multiple GeoJSON polygons. For focal aggregation see `apply`. Number of valid/invalid pixels get returned together with the calculated values.",
    "categories": [
      "cubes",
      "aggregate"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "polygons": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "format": "geojson"
          }
        },
        "required": true
      },
      "dimension": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": "object"
        }
      }
    }
  },
  {
    "id": "and",
    "summary": "Are all of the values true?",
    "description": "Checks if **all** of the values are true. Evaluates each expression from the first to the last element and stops once the outcome is unambiguous.\n\nBy default all no-data values are ignored so that the process returns `true` if all other values are true and otherwise returns `false`.\n\nSetting the `ignore_nodata` flag to `false` considers no-data values so that `null` is a valid logical object. If a component is `null`, the result will be `null` if the outcome is ambiguous. See the following truth table:\n\n```\n      || null  | false | true\n----- || ----- | ----- | -----\nnull  || null  | false | null\nfalse || false | false | false\ntrue  || null  | false | true\n```",
    "categories": [
      "logic",
      "reducer"
    ],
    "parameters": {
      "expressions": {
        "description": "A set of boolean values.",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not and ignores them by default.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "Boolean result of the logical expressions.",
      "schema": {
        "type": [
          "boolean",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "expressions": [
            false,
            null
          ]
        },
        "returns": false
      },
      {
        "arguments": {
          "expressions": [
            true,
            null
          ]
        },
        "returns": true
      },
      {
        "arguments": {
          "expressions": [
            false,
            null
          ],
          "ignore_nodata": false
        },
        "returns": false
      },
      {
        "arguments": {
          "expressions": [
            true,
            null
          ],
          "ignore_nodata": false
        },
        "returns": null
      },
      {
        "arguments": {
          "expression": [
            true,
            false,
            true,
            false
          ]
        },
        "returns": false
      },
      {
        "arguments": {
          "expression": [
            true,
            false
          ]
        },
        "returns": false
      },
      {
        "arguments": {
          "expression": [
            true,
            true
          ]
        },
        "returns": true
      }
    ]
  },
  {
    "id": "apply_dimension",
    "summary": "Applies an n-ary process.",
    "description": "Applies an n-ary process to a raster data cube. `dimensions` are the dimensions over which to iterate, if not set all dimensions are iterated over.",
    "categories": [
      "cubes"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "process": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      },
      "dimensions": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "apply",
    "summary": "Applies a local/unary process to a raster data cube.",
    "description": "Applies a local non-reducer to a raster data cube. Focal calculations can be made by setting the kernel. For zonal apply see `aggregate_zonal`. Returns a new raster data cube. The kernel has to be as many dimensions as the datacube has dimensions.",
    "categories": [
      "cubes"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "process": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      },
      "kernel": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          ],
          "default": 1
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "arccos",
    "summary": "Inverse cosine",
    "description": "Computes the arcus cosine of `x`. The arcus cosine is the inverse function of the cosine so that *arccos(cos(x)) = x*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "x": {
        "description": "A number.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed angle in radians.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 1
      },
      {
        "process_graph": {
          "cos1": {
            "process_id": "cos",
            "arguments": {
              "x": 0.5
            }
          },
          "arccos1": {
            "process_id": "arccos",
            "arguments": {
              "x": {
                "from_node": "cos1"
              }
            },
            "result": true
          }
        },
        "returns": 0.5
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/InverseCosine.html",
        "title": "Inverse cosine explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "arcosh",
    "summary": "Inverse hyperbolic cosine",
    "description": "Computes the inverse hyperbolic cosine of `x`. It is the inverse function of the hyperbolic cosine so that *arcosh(cosh(x)) = x*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "x": {
        "description": "A number.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed angle in radians.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 1
      },
      {
        "process_graph": {
          "cosh1": {
            "process_id": "cosh",
            "arguments": {
              "x": 0.5
            }
          },
          "arccosh1": {
            "process_id": "arcosh",
            "arguments": {
              "x": {
                "from_node": "cosh1"
              }
            },
            "result": true
          }
        },
        "returns": 0.5
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/InverseHyperbolicCosine.html",
        "title": "Inverse hyperbolic cosine explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "arcsin",
    "summary": "Inverse sine",
    "description": "Computes the arcus sine of `x`. The arcus sine is the inverse function of the sine so that *arcsin(sin(x)) = x*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "x": {
        "description": "A number.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed angle in radians.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      },
      {
        "process_graph": {
          "sin1": {
            "process_id": "sin",
            "arguments": {
              "x": 0.5
            }
          },
          "arcsin1": {
            "process_id": "arcsin",
            "arguments": {
              "x": {
                "from_node": "sin1"
              }
            },
            "result": true
          }
        },
        "returns": 0.5
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/InverseSine.html",
        "title": "Inverse sine explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "arctan",
    "summary": "Inverse tangent",
    "description": "Computes the arcus tangent of `x`. The arcus tangent is the inverse function of the tangent so that *arctan(tan(x)) = x*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "x": {
        "description": "A number.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed angle in radians.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      },
      {
        "process_graph": {
          "tan1": {
            "process_id": "tan",
            "arguments": {
              "x": 0.5
            }
          },
          "arctan1": {
            "process_id": "arctan",
            "arguments": {
              "x": {
                "from_node": "tan1"
              }
            },
            "result": true
          }
        },
        "returns": 0.5
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/InverseTangent.html",
        "title": "Inverse tangent explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "arctan2",
    "summary": "Inverse tangent of two numbers.",
    "description": "Computes the arcus tangent of two numbers `x` and `y`. It is similar to calculating the arcus tangent of *y / x*, except that the signs of both arguments are used to determine the quadrant of the result.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.",
    "categories": [
      "math > trigonometric"
    ],
    "parameter_order": [
      "y",
      "x"
    ],
    "parameters": {
      "y": {
        "description": "A number to be used as dividend.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      },
      "x": {
        "description": "A number to be used as divisor.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed angle in radians.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "y": 0,
          "x": 0
        },
        "returns": 0
      },
      {
        "arguments": {
          "y": null,
          "x": 1.5
        },
        "returns": null
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "https://en.wikipedia.org/wiki/Atan2",
        "title": "Two-argument inverse tangent explained by Wikipedia"
      }
    ]
  },
  {
    "id": "array_contains",
    "summary": "List contains an element",
    "description": "Checks whether the list (also known as *array*) specified for `data` contains the value specified in `element`.\n\n**Remarks:**\n* Data types MUST be checked strictly, for example a string with the content *1* is not equal to the number *1*.\n* An integer *1* is equal to a floating point number *1.0* as `integer` is a sub-type of `number`. Still, this process may return unexpectedly `false` when comparing floating point numbers due to floating point inaccuracy in machine-based computation.\n* Temporal strings are treated as normal strings and MUST NOT be interpreted.",
    "categories": [
      "arrays",
      "comparison"
    ],
    "parameter_order": [
      "data",
      "element"
    ],
    "parameters": {
      "data": {
        "description": "List in which to find a value in.",
        "schema": {
          "type": "array",
          "items": {
            "description": "Any data type is allowed."
          }
        },
        "required": true
      },
      "element": {
        "description": "Value to find in `data`.",
        "schema": {
          "description": "Any data type is allowed."
        },
        "required": true
      }
    },
    "returns": {
      "description": "Returns `true` if the list contains the value, false` otherwise.",
      "schema": {
        "type": "boolean"
      }
    },
    "examples": [
      {
        "arguments": {
          "data": [
            1,
            2,
            3
          ],
          "element": 2
        },
        "returns": true
      },
      {
        "arguments": {
          "data": [
            "A",
            "B",
            "C"
          ],
          "element": "b"
        },
        "returns": false
      },
      {
        "arguments": {
          "data": [
            1,
            2,
            3
          ],
          "element": "2"
        },
        "returns": false
      },
      {
        "arguments": {
          "data": [
            1,
            2,
            3
          ],
          "element": 2
        },
        "returns": true
      },
      {
        "arguments": {
          "data": [
            1,
            2,
            null
          ],
          "element": null
        },
        "returns": true
      },
      {
        "arguments": {
          "data": [
            [
              1,
              2
            ],
            [
              3,
              4
            ]
          ],
          "element": [
            1,
            2
          ]
        },
        "returns": true
      },
      {
        "arguments": {
          "data": [
            [
              1,
              2
            ],
            [
              3,
              4
            ]
          ],
          "element": 2
        },
        "returns": false
      },
      {
        "arguments": {
          "data": [
            {
              "a": "b"
            },
            {
              "c": "d"
            }
          ],
          "element": {
            "a": "b"
          }
        },
        "returns": true
      }
    ]
  },
  {
    "id": "array_element",
    "summary": "Get an element from an array",
    "description": "Returns the element at the specified index from the array.",
    "categories": [
      "arrays"
    ],
    "parameter_order": [
      "data",
      "index",
      "return_nodata"
    ],
    "parameters": {
      "data": {
        "description": "An array.",
        "schema": {
          "type": "array",
          "items": {
            "description": "Any data type is allowed."
          }
        },
        "required": true
      },
      "index": {
        "description": "The zero-based index of the element to retrieve.",
        "schema": {
          "type": "integer"
        },
        "required": true
      },
      "return_nodata": {
        "description": "By default this process throws an `IndexOutOfBounds` exception if the index is invalid. If you want to return `null` instead, set this flag to `true`.",
        "schema": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "returns": {
      "description": "The value of the requested element.",
      "schema": {
        "description": "Any data type is allowed."
      }
    },
    "exceptions": {
      "IndexOutOfBounds": {
        "message": "The array has no element with the specified index."
      }
    },
    "examples": [
      {
        "arguments": {
          "data": [
            9,
            8,
            7,
            6,
            5
          ],
          "index": 2
        },
        "returns": 7
      },
      {
        "arguments": {
          "data": [
            "A",
            "B",
            "C"
          ],
          "index": 0
        },
        "returns": "A"
      },
      {
        "arguments": {
          "data": [],
          "index": 0,
          "return_nodata": true
        },
        "returns": null
      }
    ]
  },
  {
    "id": "arsinh",
    "summary": "Inverse hyperbolic sine",
    "description": "Computes the inverse hyperbolic sine of `x`. It is the inverse function of the hyperbolic sine so that *arsinh(sinh(x)) = x*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "x": {
        "description": "A number.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed angle in radians.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      },
      {
        "process_graph": {
          "sinh1": {
            "process_id": "sinh",
            "arguments": {
              "x": 0.5
            }
          },
          "arcsinh1": {
            "process_id": "arsinh",
            "arguments": {
              "x": {
                "from_node": "sinh1"
              }
            },
            "result": true
          }
        },
        "returns": 0.5
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/InverseHyperbolicSine.html",
        "title": "Inverse hyperbolic sine explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "artanh",
    "summary": "Inverse hyperbolic tangent",
    "description": "Computes the inverse hyperbolic tangent of `x`. It is the inverse function of the hyperbolic tangent so that *artanh(tanh(x)) = x*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "x": {
        "description": "A number.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed angle in radians.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      },
      {
        "process_graph": {
          "cosh1": {
            "process_id": "tanh",
            "arguments": {
              "x": 0.5
            }
          },
          "arctanh1": {
            "process_id": "artanh",
            "arguments": {
              "x": {
                "from_node": "tanh1"
              }
            },
            "result": true
          }
        },
        "returns": 0.5
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/InverseHyperbolicTangent.html",
        "title": "Inverse hyperbolic tangent explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "between",
    "summary": "Between comparison",
    "description": "Checks whether `x` is greater than or equal to `min` and lower than or equal to `max` or to put it in simpler words checks whether `x` is between the lower bound `min` and the upper bound `max`. Therefore, this process is an alias for `and([gte(x, min), lte(x, max)])` and all definitions from these processes apply here as well.\n\nLower and upper bounds are not allowed to be swapped. So `min` MUST be lower than or equal to `max` or otherwise the process always returns `false`.",
    "categories": [
      "comparison"
    ],
    "parameter_order": [
      "x",
      "min",
      "max"
    ],
    "parameters": {
      "x": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "min": {
        "description": "Lower boundary (inclusive) to check against.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "max": {
        "description": "Upper boundary (inclusive) to check against.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "Returns `true` if `x` is between the specified bounds, otherwise `false`.",
      "schema": {
        "type": "boolean"
      }
    },
    "examples": [
      {
        "arguments": {
          "x": null,
          "min": 0,
          "max": 1
        },
        "returns": null
      },
      {
        "description": "Swapped bounds (min is greather than max) MUST always return `false`.",
        "arguments": {
          "x": 0.5,
          "min": 1,
          "max": 0
        },
        "returns": false
      },
      {
        "arguments": {
          "x": -0.5,
          "min": 0,
          "max": -1
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "00:00:01+01:00",
          "min": "00:00:00Z",
          "max": "00:00:00+01:00"
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "2018-07-23T17:22:45Z",
          "min": "2018-01-01T00:00:00Z",
          "max": "2018-12-31T23:59:59Z"
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "2000-01-01",
          "min": "2018-01-01",
          "max": "2020-01-01"
        },
        "returns": false
      },
      {
        "arguments": {
          "x": "2018-12-31T17:22:45Z",
          "min": "2018-01-01",
          "max": "2018-12-31"
        },
        "returns": true
      }
    ]
  },
  {
    "id": "ceil",
    "summary": "Round fractions up",
    "description": "The least integer greater than or equal to the number `x`.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > rounding"
    ],
    "parameters": {
      "x": {
        "description": "A number to round up.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The number rounded up.",
      "schema": {
        "type": [
          "integer",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      },
      {
        "arguments": {
          "x": 3.5
        },
        "returns": 4
      },
      {
        "arguments": {
          "x": -0.4
        },
        "returns": 0
      },
      {
        "arguments": {
          "x": -3.5
        },
        "returns": -3
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/CeilingFunction.html",
        "title": "Ceiling explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "clip",
    "summary": "Clips values between minimum and maximum values.",
    "description": "Clips the raster data cube values between specified min and max values. All values larger than maximal value will have the maximal value, all values lower than minimal value will have the minimal value, alias for `replace(replace(cube, gt(data, max), max), lt(data, min), min)`",
    "categories": [
      "math",
      "masks"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "min": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "max": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "cos",
    "summary": "Cosine",
    "description": "Computes the cosine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "x": {
        "description": "An angle in radians.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed cosine of `x`.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 1
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/Cosine.html",
        "title": "Cosine explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "cosh",
    "summary": "Hyperbolic cosine",
    "description": "Computes the hyperbolic cosine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "x": {
        "description": "An angle in radians.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed hyperbolic cosine of `x`.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 1
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/HyperbolicCosine.html",
        "title": "Hyperbolic cosine explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "count",
    "summary": "Number of valid elements (see is_valid).",
    "description": "Number of valid elements (see is_valid).",
    "categories": [
      "arrays",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "create_raster_cube",
    "summary": "Create an empty raster data cube",
    "description": "Creates a new raster data cube without dimensions.",
    "categories": [
      "cubes"
    ],
    "parameters": {},
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "cummax",
    "summary": "Cumulative maxima",
    "description": "Finds cumulative maxima of an array of numbers. Every computed element is equal to the bigger one between current element and previous element. The returned array and the input array have always the same length.\n\nBy default, no-data values are skipped, but stay in the result. Setting the `ignore_nodata` flag to `true` makes that once a no-data value / `null` is reached all following elements are set to `null` in the result.",
    "categories": [
      "math > cumulative"
    ],
    "parameter_order": [
      "data",
      "ignore_nodata"
    ],
    "parameters": {
      "data": {
        "description": "An array of numbers.",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is set for all the following elements.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "An array with the computed cumulative maxima.",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    },
    "examples": [
      {
        "arguments": {
          "data": [
            1,
            3,
            5,
            3,
            1
          ]
        },
        "returns": [
          1,
          3,
          5,
          5,
          5
        ]
      },
      {
        "arguments": {
          "data": [
            1,
            3,
            null,
            5,
            1
          ]
        },
        "returns": [
          1,
          3,
          null,
          5,
          5
        ]
      },
      {
        "arguments": {
          "data": [
            1,
            3,
            null,
            5,
            1
          ],
          "ignore_nodata": false
        },
        "returns": [
          1,
          3,
          null,
          null,
          null
        ]
      }
    ]
  },
  {
    "id": "cummin",
    "summary": "Cumulative minima",
    "description": "Finds cumulative minima of an array of numbers. Every computed element is equal to the smaller one between current element and previous element. The returned array and the input array have always the same length.\n\nBy default, no-data values are skipped, but stay in the result. Setting the `ignore_nodata` flag to `true` makes that once a no-data value / `null` is reached all following elements are set to `null` in the result.",
    "categories": [
      "math > cumulative"
    ],
    "parameter_order": [
      "data",
      "ignore_nodata"
    ],
    "parameters": {
      "data": {
        "description": "An array of numbers.",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is set for all the following elements.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "An array with the computed cumulative minima.",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    },
    "examples": [
      {
        "arguments": {
          "data": [
            5,
            3,
            1,
            3,
            5
          ]
        },
        "returns": [
          5,
          3,
          1,
          1,
          1
        ]
      },
      {
        "arguments": {
          "data": [
            5,
            3,
            null,
            1,
            5
          ]
        },
        "returns": [
          5,
          3,
          null,
          1,
          1
        ]
      },
      {
        "arguments": {
          "data": [
            5,
            3,
            null,
            1,
            5
          ],
          "ignore_nodata": false
        },
        "returns": [
          5,
          3,
          null,
          null,
          null
        ]
      }
    ]
  },
  {
    "id": "cumproduct",
    "summary": "Cumulative products",
    "description": "Computes cumulative products of an array of numbers. Every computed element is equal to the product of current and all previous values. The returned array and the input array have always the same length.\n\nBy default, no-data values are skipped, but stay in the result. Setting the `ignore_nodata` flag to `true` makes that once a no-data value / `null` is reached all following elements are set to `null` in the result.",
    "categories": [
      "math > cumulative"
    ],
    "parameter_order": [
      "data",
      "ignore_nodata"
    ],
    "parameters": {
      "data": {
        "description": "An array of numbers.",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is set for all the following elements.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "An array with the computed cumulative products.",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    },
    "examples": [
      {
        "arguments": {
          "data": [
            1,
            3,
            5,
            3,
            1
          ]
        },
        "returns": [
          1,
          3,
          15,
          45,
          45
        ]
      },
      {
        "arguments": {
          "data": [
            1,
            2,
            3,
            null,
            3,
            1
          ]
        },
        "returns": [
          1,
          2,
          6,
          null,
          18,
          18
        ]
      },
      {
        "arguments": {
          "data": [
            1,
            2,
            3,
            null,
            3,
            1
          ],
          "ignore_nodata": false
        },
        "returns": [
          1,
          2,
          6,
          null,
          null,
          null
        ]
      }
    ]
  },
  {
    "id": "cumsum",
    "summary": "Cumulative sums",
    "description": "Computes cumulative sums of an array of numbers. Every computed element is equal to the sum of current and all previous values. The returned array and the input array have always the same length.\n\nBy default, no-data values are skipped, but stay in the result. Setting the `ignore_nodata` flag to `true` makes that once a no-data value / `null` is reached all following elements are set to `null` in the result.",
    "categories": [
      "math > cumulative"
    ],
    "parameter_order": [
      "data",
      "ignore_nodata"
    ],
    "parameters": {
      "data": {
        "description": "An array of numbers.",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is set for all the following elements.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "An array with the computed cumulative sums.",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    },
    "examples": [
      {
        "arguments": {
          "data": [
            1,
            3,
            5,
            3,
            1
          ]
        },
        "returns": [
          1,
          4,
          9,
          12,
          13
        ]
      },
      {
        "arguments": {
          "data": [
            1,
            3,
            null,
            3,
            1
          ]
        },
        "returns": [
          1,
          4,
          null,
          7,
          8
        ]
      },
      {
        "arguments": {
          "data": [
            1,
            3,
            null,
            3,
            1
          ],
          "ignore_nodata": false
        },
        "returns": [
          1,
          4,
          null,
          null,
          null
        ]
      }
    ]
  },
  {
    "id": "debug",
    "summary": "Send debugging information to the client",
    "description": "Sends debugging information about the data to the client, who needs to be subscribed to the topic `openeo.jobs.debug`.",
    "categories": [
      "development"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "description": "Any data type is allowed."
        },
        "required": true
      },
      "identifier": {
        "description": "",
        "schema": {
          "type": "string"
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "divide",
    "summary": "x divided all other elements",
    "description": "x divided all other elements",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "x": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "e",
    "summary": "Euler's number (e)",
    "description": "The real number *e* is a mathematical constant that is the base of the natural logarithm such that *ln(e) = 1*. The numerical value is approximately *2.71828*.",
    "categories": [
      "math > constants",
      "math > exponential & logarithmic"
    ],
    "parameters": {},
    "returns": {
      "description": "Returns the numerical value of Euler's number.",
      "schema": {
        "type": "number"
      }
    },
    "examples": [
      {
        "title": "Test for ln(e) = 1",
        "process_graph": {
          "e1": {
            "process_id": "e",
            "arguments": {}
          },
          "ln1": {
            "process_id": "ln",
            "arguments": {
              "data": {
                "from_node": "e1"
              }
            },
            "result": true
          }
        },
        "returns": 1
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/e.html",
        "title": "Mathematical constant e explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "eq",
    "summary": "Equal to comparison",
    "description": "Compares whether `x` is strictly equal to `y`.\n\n**Remarks:**\n* Data types MUST be checked strictly, for example a string with the content *1* is not equal to the number *1*. Nevertheless, an integer *1* is equal to a floating point number *1.0* as `integer` is a sub-type of `number`.\n* If any of the operands is `null`, the return value is `null`.\n* Strings are expected to be encoded in UTF-8 by default.\n* Temporal strings MUST be compared differently than other strings and MUST NOT be compared based on their string representation due to different possible representations. For example, the UTC time zone representation `Z` has the same meaning as `+00:00`.",
    "categories": [
      "texts",
      "comparison"
    ],
    "parameter_order": [
      "x",
      "y",
      "delta",
      "case_sensitive"
    ],
    "parameters": {
      "x": {
        "description": "First operand.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "y": {
        "description": "Second operand.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "delta": {
        "description": "Only applicable for comparing two numbers. If this optional parameter is set to a positive non-zero number the equality of two numbers is checked against a delta value. This is especially useful to circumvent problems with floating point inaccuracy in machine-based computation.\n\nThis option is basically an alias for the following computation: `lte(abs(minus([x, y]), delta)`",
        "schema": {
          "type": [
            "number",
            "null"
          ],
          "default": null
        }
      },
      "case_sensitive": {
        "description": "Only applicable for comparing two strings. Case sensitive comparison can be disabled by setting this parameter to `false`.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "Returns `true` if `x` is equal to `y`, `null` if any of the operands is `null`, otherwise `false`.",
      "schema": {
        "type": [
          "boolean",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 1,
          "y": null
        },
        "returns": null
      },
      {
        "arguments": {
          "x": 1,
          "y": 1
        },
        "returns": true
      },
      {
        "arguments": {
          "x": 1,
          "y": "1"
        },
        "returns": false
      },
      {
        "arguments": {
          "x": 1.02,
          "y": 1,
          "delta": 0.01
        },
        "returns": false
      },
      {
        "arguments": {
          "x": -1,
          "y": -1.001,
          "delta": 0.01
        },
        "returns": true
      },
      {
        "arguments": {
          "x": 115,
          "y": 110,
          "delta": 10
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "Test",
          "y": "test"
        },
        "returns": false
      },
      {
        "arguments": {
          "x": "Test",
          "y": "test",
          "case_sensitive": false
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "Ä",
          "y": "ä",
          "case_sensitive": false
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "00:00:00+00:00",
          "y": "00:00:00Z"
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "2018-01-01T12:00:00Z",
          "y": "2018-01-01T12:00:00"
        },
        "returns": false
      },
      {
        "arguments": {
          "x": "2018-01-01T00:00:00Z",
          "y": "2018-01-01Z01:00:00+01:00"
        },
        "returns": true
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "https://open-eo.github.io/openeo-api/v/0.4.0/processes/#openeo-specific-formats",
        "title": "Information about the supported temporal formats."
      }
    ]
  },
  {
    "id": "exp",
    "summary": "Exponentiation to the base e",
    "description": "Exponential function to the base *e* raised to the power of `p`. This process is an alias for *e^p^* / `power(e(), p)`.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > exponential & logarithmic"
    ],
    "parameters": {
      "p": {
        "description": "The numerical exponent.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed value for *e* raised to the power of `p`.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "p": 0
        },
        "returns": 1
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/ExponentialFunction.html",
        "title": "Exponential function explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "export",
    "summary": "Data export, compatible to GDAL/OGR.",
    "description": "Export process that is compatible to GDAL/OGR formats and options. Passes through the data cube, so that further intermediate results can be exported and further calculations can be processes.",
    "categories": [
      "cubes",
      "export"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "object",
              "format": "raster-cube"
            },
            {
              "type": "object",
              "format": "vector-cube"
            }
          ]
        },
        "required": true
      },
      "format": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "options": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "extrema",
    "summary": "Minimum and maximum values",
    "description": "Two element array containing the minimum and the maximum values of `data`. Basically an alias for `min` and `max`, but potentially faster than calling both separately.",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    }
  },
  {
    "id": "filter_bands",
    "summary": "Filters the bands in the raster data cube.",
    "description": "The order of the bands matters!",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "bands": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "filter_bbox",
    "summary": "Limits the data to the specified bbox.",
    "description": "Limits the data to the specified bbox.",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "object",
              "format": "raster-cube"
            },
            {
              "type": "object",
              "format": "vector-cube"
            }
          ]
        },
        "required": true
      },
      "west": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "south": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "east": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "north": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "base": {
        "description": "",
        "schema": {
          "type": "number"
        }
      },
      "height": {
        "description": "",
        "schema": {
          "type": "number"
        }
      },
      "crs": {
        "description": "",
        "schema": {
          "type": "string"
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "raster-cube"
          },
          {
            "type": "object",
            "format": "vector-cube"
          }
        ]
      }
    }
  },
  {
    "id": "filter_geometry",
    "summary": "Limits the data to the specified geometry",
    "description": "Limits the data to the specified geometry",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "object",
              "format": "raster-cube"
            },
            {
              "type": "object",
              "format": "vector-cube"
            }
          ]
        },
        "required": true
      },
      "geometry": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "geojson"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "raster-cube"
          },
          {
            "type": "object",
            "format": "vector-cube"
          }
        ]
      }
    }
  },
  {
    "id": "filter_property",
    "summary": "Filter based on properties",
    "description": "Filters the data based on the specified property. Example: Filter by `instrument_mode` from STAC properties.",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "name": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "expression": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "filter_temporal",
    "summary": "Limits the data to the specified date range.",
    "description": "Alias for filter() with callbacks to between_datetime(), between_date(), between_month() and between_year().",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "object",
              "format": "raster-cube"
            },
            {
              "type": "object",
              "format": "vector-cube"
            }
          ]
        },
        "required": true
      },
      "from": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "to": {
        "description": "",
        "schema": {
          "type": "string"
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "raster-cube"
          },
          {
            "type": "object",
            "format": "vector-cube"
          }
        ]
      }
    }
  },
  {
    "id": "filter",
    "summary": "Filtering data based on a logical expression.",
    "description": "",
    "categories": [
      "cubes",
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "object",
              "format": "raster-cube"
            },
            {
              "type": "object",
              "format": "vector-cube"
            }
          ]
        },
        "required": true
      },
      "expression": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      },
      "dimension": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "raster-cube"
          },
          {
            "type": "object",
            "format": "vector-cube"
          }
        ]
      }
    }
  },
  {
    "id": "find_collection",
    "summary": "Load a collection selected by properties",
    "description": "Select and load an internal collection by properties. Returns a data cube.",
    "categories": [
      "cubes",
      "import"
    ],
    "parameters": {
      "expression": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "raster-cube"
          },
          {
            "type": "object",
            "format": "vector-cube"
          }
        ]
      }
    }
  },
  {
    "id": "first",
    "summary": "First element of nums.",
    "description": "First element of nums.",
    "categories": [
      "arrays",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "floor",
    "summary": "Round fractions down",
    "description": "The greatest integer less than or equal to the number `x`.\n\nThis process is *not* an alias for the `int` process as defined by some mathematicians, see the examples for negative numbers in both processes for differences.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > rounding"
    ],
    "parameters": {
      "x": {
        "description": "A number to round down.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The number rounded down.",
      "schema": {
        "type": [
          "integer",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      },
      {
        "arguments": {
          "x": 3.5
        },
        "returns": 3
      },
      {
        "arguments": {
          "x": -0.4
        },
        "returns": -1
      },
      {
        "arguments": {
          "x": -3.5
        },
        "returns": -4
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/FloorFunction.html",
        "title": "Floor explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "get_collection",
    "summary": "Load a collection by ID.",
    "description": "Load a collection from the current back-end by collection ID and return it as data cube.",
    "categories": [
      "cubes",
      "import"
    ],
    "parameters": {
      "id": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "raster-cube"
          },
          {
            "type": "object",
            "format": "vector-cube"
          }
        ]
      }
    }
  },
  {
    "id": "get_process_graph",
    "summary": "Load an internal process graph by id",
    "description": "Load a process graph from the current back-end by process graph id",
    "categories": [
      "import"
    ],
    "parameters": {
      "id": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "variables": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object"
      }
    }
  },
  {
    "id": "get_result",
    "summary": "Load batch job results by id",
    "description": "Load internal batch job results by job id.",
    "categories": [
      "cubes",
      "import"
    ],
    "parameters": {
      "id": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "raster-cube"
          },
          {
            "type": "object",
            "format": "vector-cube"
          }
        ]
      }
    }
  },
  {
    "id": "get_udf",
    "summary": "Load and run an internal UDF",
    "description": "Load and run an internal UDF to be executed in the context of reduce, aggregate, apply, ...",
    "categories": [
      "import",
      "udf"
    ],
    "parameters": {
      "path": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "runtime_identifier": {
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "options": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "callback"
      }
    }
  },
  {
    "id": "gt",
    "summary": "Greater than comparison",
    "description": "Compares whether `x` is strictly greater than `y`.\n\n**Remarks:**\n* If any of the operands is `null`, the return value is `null`.\n* Temporal strings can *not* be compared based on their string representation due to the timezone / time-offset representations.\n* Comparing strings is currently not supported, but is planned to be added in the future.",
    "categories": [
      "comparison"
    ],
    "parameter_order": [
      "x",
      "y"
    ],
    "parameters": {
      "x": {
        "description": "First operand.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "y": {
        "description": "Second operand.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "Returns `true` if `x` is strictly greater than `y`, `null` if any of the operands is `null`, otherwise `false`.",
      "schema": {
        "type": [
          "boolean",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 1,
          "y": null
        },
        "returns": null
      },
      {
        "arguments": {
          "x": 0,
          "y": 0
        },
        "returns": false
      },
      {
        "arguments": {
          "x": 2,
          "y": 1
        },
        "returns": true
      },
      {
        "arguments": {
          "x": -0.5,
          "y": -0.6
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "00:00:00Z",
          "y": "00:00:00+01:00"
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "1950-01-01T00:00:00Z",
          "y": "2018-01-01T12:00:00Z"
        },
        "returns": false
      },
      {
        "arguments": {
          "x": "2018-01-01T12:00:00+00:00",
          "y": "2018-01-01T12:00:00Z"
        },
        "returns": false
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "https://open-eo.github.io/openeo-api/v/0.4.0/processes/#openeo-specific-formats",
        "title": "Information about the supported temporal formats."
      }
    ]
  },
  {
    "id": "gte",
    "summary": "Greater than or equal to comparison",
    "description": "Compares whether `x` is greater than or equal to `y`.\n\n**Remarks:**\n* If any of the operands is `null`, the return value is `null`.\n* Temporal strings can *not* be compared based on their string representation due to the timezone / time-offset representations.\n* Comparing strings is currently not supported, but is planned to be added in the future.",
    "categories": [
      "comparison"
    ],
    "parameter_order": [
      "x",
      "y"
    ],
    "parameters": {
      "x": {
        "description": "First operand.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "y": {
        "description": "Second operand.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "Returns `true` if `x` is greater than or equal to `y`, `null` if any of the operands is `null`, otherwise `false`.",
      "schema": {
        "type": [
          "boolean",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 1,
          "y": null
        },
        "returns": null
      },
      {
        "arguments": {
          "x": 0,
          "y": 0
        },
        "returns": true
      },
      {
        "arguments": {
          "x": 1,
          "y": 2
        },
        "returns": false
      },
      {
        "arguments": {
          "x": -0.5,
          "y": -0.6
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "00:00:00Z",
          "y": "00:00:00+01:00"
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "1950-01-01T00:00:00Z",
          "y": "2018-01-01T12:00:00Z"
        },
        "returns": false
      },
      {
        "arguments": {
          "x": "2018-01-01T12:00:00+00:00",
          "y": "2018-01-01T12:00:00Z"
        },
        "returns": true
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "https://open-eo.github.io/openeo-api/v/0.4.0/processes/#openeo-specific-formats",
        "title": "Information about the supported temporal formats."
      }
    ]
  },
  {
    "id": "if",
    "summary": "If-Then-Else conditional",
    "description": "Returns the value of the `accept` parameter if the expression is `true` or the value of the `reject` parameter if the expression is `false`. This works similar to an if-then-else construct.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "logic",
      "comparison",
      "masks"
    ],
    "parameters": {
      "expression": {
        "description": "A boolean value.",
        "schema": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "required": true
      },
      "accept": {
        "description": "A value that is returned if the boolean expression is `true`. Defaults to `true`.",
        "schema": {
          "description": "Any data type is allowed.",
          "default": true
        }
      },
      "reject": {
        "description": "A value that is returned if the boolean expression is `false`. Defaults to `false`.",
        "schema": {
          "description": "Any data type is allowed.",
          "default": false
        }
      }
    },
    "returns": {
      "description": "Returns either the `accept` argument or `reject` argument depending on the given boolean expression.",
      "schema": {
        "description": "Any data type is allowed."
      }
    },
    "examples": [
      {
        "arguments": {
          "expression": true
        },
        "returns": true
      },
      {
        "arguments": {
          "expression": null
        },
        "returns": null
      },
      {
        "arguments": {
          "expressions": false
        },
        "returns": false
      },
      {
        "arguments": {
          "expression": true,
          "accept": "A"
        },
        "returns": "A"
      },
      {
        "arguments": {
          "expression": false,
          "accept": [
            1,
            2,
            3
          ],
          "reject": [
            4,
            5,
            6
          ]
        },
        "returns": [
          4,
          5,
          6
        ]
      }
    ]
  },
  {
    "id": "import_process_graph",
    "summary": "Load an external process graph by url",
    "description": "Load an external process graph by url",
    "categories": [
      "import"
    ],
    "parameters": {
      "url": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "variables": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object"
      }
    }
  },
  {
    "id": "import_result",
    "summary": "Load external batch job results by url",
    "description": "Load an external batch job results by url",
    "categories": [
      "cubes",
      "import"
    ],
    "parameters": {
      "url": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "raster-cube"
          },
          {
            "type": "object",
            "format": "vector-cube"
          }
        ]
      }
    }
  },
  {
    "id": "import_udf",
    "summary": "Load and run an external UDF",
    "description": "Load and run an external UDF to be executed in the context of reduce, aggregate, apply, …Examples: import_udf(‘https://hub.openeo.org/udf/wur/bfast’); Maybe also just import_udf(‘hub://bfast’)",
    "categories": [
      "import",
      "udf"
    ],
    "parameters": {
      "url": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "runtime_identifier": {
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "options": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "callback"
      }
    }
  },
  {
    "id": "int",
    "summary": "Integer part of a number",
    "description": "The integer part of the real number `x`.\n\nThis process is *not* an alias for the `floor` process as defined by some mathematicians, see the examples for negative numbers in both processes for differences.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math",
      "math > rounding"
    ],
    "parameters": {
      "x": {
        "description": "A number.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "Integer part of the number.",
      "schema": {
        "type": [
          "integer",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      },
      {
        "arguments": {
          "x": 3.5
        },
        "returns": 3
      },
      {
        "arguments": {
          "x": -0.4
        },
        "returns": 0
      },
      {
        "arguments": {
          "x": -3.5
        },
        "returns": -3
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/IntegerPart.html",
        "title": "Integer Part explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "is_nan",
    "summary": "Value is not a number",
    "description": "Checks whether the specified value `x` is not a number (often abbreviated as `NaN`). The definition of `NaN` follows the [IEEE Standard 754](https://ieeexplore.ieee.org/document/4610935). All non-numeric data types MUST also return `false`.",
    "categories": [
      "comparison"
    ],
    "parameters": {
      "x": {
        "description": "The data to check.",
        "schema": {
          "description": "Any data type is allowed."
        },
        "required": true
      }
    },
    "returns": {
      "description": "Returns `true` if the data is not a number, otherwise `false`",
      "schema": {
        "type": "boolean"
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 1
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "Test"
        },
        "returns": false
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "https://ieeexplore.ieee.org/document/4610935",
        "title": "IEEE Standard 754-2008 for Floating-Point Arithmetic"
      }
    ]
  },
  {
    "id": "is_nodata",
    "summary": "Value is not a no-data value",
    "description": "Checks whether the specified data is a missing data, i.e. equals to one of the no-data values / `null`.",
    "categories": [
      "comparison"
    ],
    "parameters": {
      "x": {
        "description": "The data to check.",
        "schema": {
          "description": "Any data type is allowed."
        },
        "required": true
      }
    },
    "returns": {
      "description": "Returns `true` if the data is a no-data value, otherwise `false`",
      "schema": {
        "type": "boolean"
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 1
        },
        "returns": false
      },
      {
        "arguments": {
          "x": "Test"
        },
        "returns": false
      },
      {
        "arguments": {
          "x": null
        },
        "returns": true
      }
    ]
  },
  {
    "id": "is_valid",
    "summary": "Value is valid data",
    "description": "Checks whether the specified value `x` is valid. A value is considered valid if it is \n1. not a no-data value (`null`) and \n2. a finite number (only if `x` is a number). The definition of finite and infinite numbers follows the [IEEE Standard 754](https://ieeexplore.ieee.org/document/4610935).",
    "categories": [
      "comparison"
    ],
    "parameters": {
      "x": {
        "description": "The data to check.",
        "schema": {
          "description": "Any data type is allowed."
        },
        "required": true
      }
    },
    "returns": {
      "description": "Returns `true` if the data is valid, otherwise `false`",
      "schema": {
        "type": "boolean"
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 1
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "Test"
        },
        "returns": true
      },
      {
        "arguments": {
          "x": null
        },
        "returns": false
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "https://ieeexplore.ieee.org/document/4610935",
        "title": "IEEE Standard 754-2008 for Floating-Point Arithmetic"
      }
    ]
  },
  {
    "id": "last",
    "summary": "Last element of nums.",
    "description": "Last element of nums.",
    "categories": [
      "arrays",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "linear_scale_range",
    "summary": "Linear transformation between two ranges",
    "description": "Performs a linear transformation between the input and output range.\n\nThe underlying formula is: `((x - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin) + outputMin`.\n\nPotential use case include\n* scaling values to the range of the RGB color model (0 - 255) or\n* calculating percentages (0 - 100).\n\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math"
    ],
    "parameter_order": [
      "x",
      "inputMin",
      "inputMax",
      "outputMin",
      "outputMax"
    ],
    "parameters": {
      "x": {
        "description": "A number to transform.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      },
      "inputMin": {
        "description": "Minimum value the input can obtain.",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "inputMax": {
        "description": "Maximum value the input can obtain.",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "outputMin": {
        "description": "Minimum value of the desired output range.",
        "schema": {
          "type": "number",
          "default": 0
        }
      },
      "outputMax": {
        "description": "Maximum value of the desired output range.",
        "schema": {
          "type": "number",
          "default": 1
        }
      }
    },
    "returns": {
      "description": "The transformed number.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0.3,
          "inputMin": -1,
          "inputMax": 1,
          "outputMin": 0,
          "outputMax": 255
        },
        "returns": 165.75
      },
      {
        "arguments": {
          "x": 25.5,
          "inputMin": 0,
          "inputMax": 255
        },
        "returns": 0.1
      },
      {
        "arguments": {
          "x": null,
          "inputMin": 0,
          "inputMax": 100
        },
        "returns": null
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "https://open-eo.github.io/openeo-api/v/0.4.0/processes/#openeo-specific-formats",
        "title": "Information about the supported temporal formats."
      }
    ]
  },
  {
    "id": "ln",
    "summary": "Natural logarithm",
    "description": "The natural logarithm is the logarithm to the base *e* of the number `x`. This process is an alias for the *log* process with the base set to *e*: `log(x, e())`. The natural logarithm is the inverse function of taking *e* to the power x.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > exponential & logarithmic"
    ],
    "parameters": {
      "x": {
        "description": "A number to compute the natural logarithm for.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed natural logarithm.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "title": "Example for ln(e) = 1",
        "process_graph": {
          "e1": {
            "process_id": "e",
            "arguments": {}
          },
          "ln1": {
            "process_id": "ln",
            "arguments": {
              "data": {
                "from_node": "e1"
              }
            },
            "result": true
          }
        },
        "returns": 1
      },
      {
        "arguments": {
          "x": 1
        },
        "returns": 0
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/NaturalLogarithm.html",
        "title": "Natural logarithm explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "log",
    "summary": "Logarithm to a base",
    "description": "Logarithm to the base `base` of the number `x` is defined to be the inverse function of taking b to the power of x.\n\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.",
    "categories": [
      "math > exponential & logarithmic"
    ],
    "parameter_order": [
      "x",
      "base"
    ],
    "parameters": {
      "x": {
        "description": "A number to compute the logarithm for.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      },
      "base": {
        "description": "The numerical base.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed logarithm.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 10,
          "base": 10
        },
        "returns": 1
      },
      {
        "arguments": {
          "x": 2,
          "base": 2
        },
        "returns": 1
      },
      {
        "arguments": {
          "x": 4,
          "base": 2
        },
        "returns": 2
      },
      {
        "arguments": {
          "x": 1,
          "base": 16
        },
        "returns": 0
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/Logarithm.html",
        "title": "Logarithm explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "lt",
    "summary": "Less than comparison",
    "description": "Compares whether `x` is strictly less than `y`.\n\n**Remarks:**\n* If any of the operands is `null`, the return value is `null`.\n* Temporal strings can *not* be compared based on their string representation due to the timezone / time-offset representations.\n* Comparing strings is currently not supported, but is planned to be added in the future.",
    "categories": [
      "comparison"
    ],
    "parameter_order": [
      "x",
      "y"
    ],
    "parameters": {
      "x": {
        "description": "First operand.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "y": {
        "description": "Second operand.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "Returns `true` if `x` is strictly less than `y`, `null` if any of the operands is `null`, otherwise `false`.",
      "schema": {
        "type": [
          "boolean",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 1,
          "y": null
        },
        "returns": null
      },
      {
        "arguments": {
          "x": 0,
          "y": 0
        },
        "returns": false
      },
      {
        "arguments": {
          "x": 1,
          "y": 2
        },
        "returns": true
      },
      {
        "arguments": {
          "x": -0.5,
          "y": -0.6
        },
        "returns": false
      },
      {
        "arguments": {
          "x": "00:00:00+01:00",
          "y": "00:00:00Z"
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "1950-01-01T00:00:00Z",
          "y": "2018-01-01T12:00:00Z"
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "2018-01-01T12:00:00+00:00",
          "y": "2018-01-01T12:00:00Z"
        },
        "returns": false
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "https://open-eo.github.io/openeo-api/v/0.4.0/processes/#openeo-specific-formats",
        "title": "Information about the supported temporal formats."
      }
    ]
  },
  {
    "id": "lte",
    "summary": "Less than or equal to comparison",
    "description": "Compares whether `x` is less than or equal to `y`.\n\n**Remarks:**\n* If any of the operands is `null`, the return value is `null`.\n* Temporal strings can *not* be compared based on their string representation due to the timezone / time-offset representations.\n* Comparing strings is currently not supported, but is planned to be added in the future.",
    "categories": [
      "comparison"
    ],
    "parameter_order": [
      "x",
      "y"
    ],
    "parameters": {
      "x": {
        "description": "First operand.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "y": {
        "description": "Second operand.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "Returns `true` if `x` is less than or equal to `y`, `null` if any of the operands is `null`, otherwise `false`.",
      "schema": {
        "type": [
          "boolean",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 1,
          "y": null
        },
        "returns": null
      },
      {
        "arguments": {
          "x": 0,
          "y": 0
        },
        "returns": true
      },
      {
        "arguments": {
          "x": 1,
          "y": 2
        },
        "returns": true
      },
      {
        "arguments": {
          "x": -0.5,
          "y": -0.6
        },
        "returns": false
      },
      {
        "arguments": {
          "x": "00:00:00+01:00",
          "y": "00:00:00Z"
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "1950-01-01T00:00:00Z",
          "y": "2018-01-01T12:00:00Z"
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "2018-01-01T12:00:00+00:00",
          "y": "2018-01-01T12:00:00Z"
        },
        "returns": true
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "https://open-eo.github.io/openeo-api/v/0.4.0/processes/#openeo-specific-formats",
        "title": "Information about the supported temporal formats."
      }
    ]
  },
  {
    "id": "mask",
    "summary": "Apply a mask.",
    "description": "Compares the parallel elements and replaces all non-zero or true elements with `replacement`. Defaults to null/no-data.",
    "categories": [
      "masks"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "mask": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "replacement": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "max",
    "summary": "Maximum value",
    "description": "Maximum value",
    "categories": [
      "arrays",
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "mean",
    "summary": "Arithmetic mean (average)",
    "description": "Arithmetic mean (average)",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "median",
    "summary": "Median",
    "description": "alias for: `quantiles(data, 0.5)`",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "merge_cubes",
    "summary": "Merging two data cubes",
    "description": "The data cubes have to be compatible. Is the inverse of a split if there is no overlap. If data overlaps the overlap resolver must be specified to resolve the overlap. Doesn’t add dimensions.",
    "categories": [
      "cubes"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "other": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "overlap_resolver": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "min",
    "summary": "Minimum value",
    "description": "Minimum value",
    "categories": [
      "arrays",
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "minus",
    "summary": "x minus all other elements",
    "description": "x minus all other elements",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "x": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "mod",
    "summary": "Modulo",
    "description": "Remainder after division of `x` by `y`.\n\nThe result of a modulo operation has the sign of the divisor. The handling regarding the sign of the result [differs between programming languages](https://en.wikipedia.org/wiki/Modulo_operation) and needs careful consideration while implementing this process.\n\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.",
    "categories": [
      "math"
    ],
    "parameter_order": [
      "x",
      "y"
    ],
    "parameters": {
      "x": {
        "description": "A number to be used as dividend.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      },
      "y": {
        "description": "A number to be used as divisor.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The remainder after division.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 27,
          "y": 5
        },
        "returns": 2
      },
      {
        "arguments": {
          "x": -27,
          "y": 5
        },
        "returns": 3
      },
      {
        "arguments": {
          "x": 27,
          "y": -5
        },
        "returns": -3
      },
      {
        "arguments": {
          "x": -27,
          "y": -5
        },
        "returns": -2
      },
      {
        "arguments": {
          "x": 27,
          "y": 5
        },
        "returns": 2
      },
      {
        "arguments": {
          "x": 27,
          "y": null
        },
        "returns": null
      },
      {
        "arguments": {
          "x": null,
          "y": 5
        },
        "returns": null
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "https://en.wikipedia.org/wiki/Modulo_operation",
        "title": "Modulo explained by Wikipedia"
      }
    ]
  },
  {
    "id": "NDVI",
    "summary": "Normalized Difference Vegetation Index",
    "description": "Computes the Normalized Difference Vegetation Index (NDVI). The NDVI is computed as *(nir - red) / (nir + red)*.\n\nThe `data` parameter expects a raster data cube with two bands that have the common names `red` and `nir` assigned. The process returns a raster data cube with two bands being replaced with a new band that holds the computed values. For ease of use the newly created band should be named `ndvi`.\n\nThis process is very similar to the `normalized_difference` process, but determines the bands automatically based on the common name (`red`/`nir`) specified in the metadata.",
    "categories": [
      "math > indices",
      "vegetation indices"
    ],
    "parameters": {
      "data": {
        "description": "A raster data cube with two bands that have the common names `red` and `nir` assigned.",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      }
    },
    "returns": {
      "description": "A raster data cube with two bands being replaced with a new band (preferably named `ndvi`) that holds the computed values.",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    },
    "links": [
      {
        "rel": "about",
        "href": "https://en.wikipedia.org/wiki/Normalized_difference_vegetation_index",
        "title": "NDVI explained by Wikipedia"
      },
      {
        "rel": "about",
        "href": "https://earthobservatory.nasa.gov/features/MeasuringVegetation/measuring_vegetation_2.php",
        "title": "NDVI explained by NASA"
      }
    ]
  },
  {
    "id": "neq",
    "summary": "Not equal to comparison",
    "description": "Compares whether `x` is *not* strictly equal to `y`. This process is an alias for: `not(eq(val1, val2))`.\n\n**Remarks:**\n* Data types MUST be checked strictly, for example a string with the content *1* is not equal to the number *1*. Nevertheless, an integer *1* is equal to a floating point number *1.0* as `integer` is a sub-type of `number`.\n* If any of the operands is `null`, the return value is `null`.\n* Strings are expected to be encoded in UTF-8 by default.\n* Temporal strings MUST be compared differently than other strings and MUST NOT be compared based on their string representation due to different possible representations. For example, the UTC time zone representation `Z` has the same meaning as `+00:00`.",
    "categories": [
      "texts",
      "comparison"
    ],
    "parameter_order": [
      "x",
      "y",
      "delta",
      "case_sensitive"
    ],
    "parameters": {
      "x": {
        "description": "First operand.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "y": {
        "description": "Second operand.",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "delta": {
        "description": "Only applicable for comparing two numbers. If this optional parameter is set to a positive non-zero number the non-equality of two numbers is checked against a delta value. This is especially useful to circumvent problems with floating point inaccuracy in machine-based computation.\n\nThis option is basically an alias for the following computation: `gt(abs(minus([x, y]), delta)`",
        "schema": {
          "type": [
            "number",
            "null"
          ],
          "default": null
        }
      },
      "case_sensitive": {
        "description": "Only applicable for comparing two strings. Case sensitive comparison can be disabled by setting this parameter to `false`.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "Returns `true` if `x` is *not* equal to `y`, `null` if any of the operands is `null`, otherwise `false`.",
      "schema": {
        "type": [
          "boolean",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 1,
          "y": null
        },
        "returns": null
      },
      {
        "arguments": {
          "x": 1,
          "y": 1
        },
        "returns": false
      },
      {
        "arguments": {
          "x": 1,
          "y": "1"
        },
        "returns": true
      },
      {
        "arguments": {
          "x": 1.02,
          "y": 1,
          "delta": 0.01
        },
        "returns": true
      },
      {
        "arguments": {
          "x": -1,
          "y": -1.001,
          "delta": 0.01
        },
        "returns": false
      },
      {
        "arguments": {
          "x": 115,
          "y": 110,
          "delta": 10
        },
        "returns": false
      },
      {
        "arguments": {
          "x": "Test",
          "y": "test"
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "Test",
          "y": "test",
          "case_sensitive": false
        },
        "returns": false
      },
      {
        "arguments": {
          "x": "Ä",
          "y": "ä",
          "case_sensitive": false
        },
        "returns": false
      },
      {
        "arguments": {
          "x": "00:00:00+00:00",
          "y": "00:00:00Z"
        },
        "returns": false
      },
      {
        "arguments": {
          "x": "2018-01-01T12:00:00Z",
          "y": "2018-01-01T12:00:00"
        },
        "returns": true
      },
      {
        "arguments": {
          "x": "2018-01-01T00:00:00Z",
          "y": "2018-01-01Z01:00:00+01:00"
        },
        "returns": false
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "https://open-eo.github.io/openeo-api/v/0.4.0/processes/#openeo-specific-formats",
        "title": "Information about the supported temporal formats."
      }
    ]
  },
  {
    "id": "normalized_difference",
    "summary": "Normalized difference for two bands",
    "description": "Computes the normalized difference for two bands. The normalized difference is computed as *(band1 - band2) / (band1 + band2)*.\n\nEach of the parameters expects a raster data cube with exactly one band. The process returns a raster data cube with exactly one band that holds the computed values. For ease of use the newly created band should be named `normalized_difference`.\n\nThis process could be used for a number of remote sensing indices such as:\n\n* [NDVI](https://eos.com/ndvi/)\n* [NDWI](https://eos.com/ndwi/)\n* [NDSI](https://eos.com/ndsi/)\n\nPlease note that some back-ends may have native processes such as the `NDVI` process available for convenience.",
    "categories": [
      "math > indices",
      "vegetation indices"
    ],
    "parameter_order": [
      "band1",
      "band2"
    ],
    "parameters": {
      "band1": {
        "description": "A raster data cube with exactly one band to be used as first band.",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "band2": {
        "description": "A raster data cube with exactly one band to be used as second band.",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      }
    },
    "returns": {
      "description": "A raster data cube with exactly one band (preferably named `normalized_difference`) that holds the computed values.",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    },
    "links": [
      {
        "rel": "related",
        "href": "https://eos.com/ndvi/",
        "title": "NDVI explained by EOS"
      },
      {
        "rel": "related",
        "href": "https://eos.com/ndwi/",
        "title": "NDWI explained by EOS"
      },
      {
        "rel": "related",
        "href": "https://eos.com/ndsi/",
        "title": "NDSI explained by EOS"
      }
    ]
  },
  {
    "id": "not",
    "summary": "Inverting a boolean",
    "description": "Inverts a single boolean so that `true` gets `false` and `false` gets `true`.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "logic"
    ],
    "parameters": {
      "expression": {
        "description": "Boolean value to invert.",
        "schema": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "Inverted boolean value.",
      "schema": {
        "type": [
          "boolean",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "expression": null
        },
        "returns": null
      },
      {
        "arguments": {
          "expression": false
        },
        "returns": true
      },
      {
        "arguments": {
          "expression": true
        },
        "returns": false
      }
    ]
  },
  {
    "id": "or",
    "summary": "Is at least one value true?",
    "description": "Checks if **at least one** of the values is true. Evaluates each expression from the first to the last element and stops once the outcome is unambiguous.\n\nBy default all no-data values are ignored so that the process returns `true` if at least one of the other values is true and otherwise returns `false`.\n\nSetting the `ignore_nodata` flag to `false` considers no-data values so that `null` is a valid logical object. If a component is `null`, the result will be `null` if the outcome is ambiguous. See the following truth table:\n\n```\n      || null | false | true\n----- || ---- | ----- | ----\nnull  || null | null  | true\nfalse || null | false | true\ntrue  || true | true  | true\n```",
    "categories": [
      "logic",
      "reducer"
    ],
    "parameters": {
      "expressions": {
        "description": "A set of boolean values.",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not and ignores them by default.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "Boolean result of the logical expressions.",
      "schema": {
        "type": [
          "boolean",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "expressions": [
            false,
            null
          ]
        },
        "returns": false
      },
      {
        "arguments": {
          "expressions": [
            true,
            null
          ]
        },
        "returns": true
      },
      {
        "arguments": {
          "expressions": [
            false,
            null
          ],
          "ignore_nodata": false
        },
        "returns": null
      },
      {
        "arguments": {
          "expressions": [
            true,
            null
          ],
          "ignore_nodata": false
        },
        "returns": true
      },
      {
        "arguments": {
          "expression": [
            true,
            false,
            true,
            false
          ]
        },
        "returns": true
      },
      {
        "arguments": {
          "expression": [
            true,
            false
          ]
        },
        "returns": true
      },
      {
        "arguments": {
          "expression": [
            false,
            false
          ]
        },
        "returns": false
      }
    ]
  },
  {
    "id": "order",
    "summary": "Returns a permutation for sorting.",
    "description": "Computes a permutation which allows rearranging the data into ascending or descending order. Ties will be left in their original ordering.",
    "categories": [
      "arrays",
      "sorting"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": true
      },
      "asc": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": "integer"
        }
      }
    }
  },
  {
    "id": "output",
    "summary": "Output information to the client",
    "description": "Outputs the data to the client, who needs to be subscribed to the topic `openeo.jobs.output`.",
    "categories": [
      "development"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "description": "Any data type is allowed."
        },
        "required": true
      },
      "identifier": {
        "description": "",
        "schema": {
          "type": "string"
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "pi",
    "summary": "Pi (π)",
    "description": "The real number Pi (π) is a mathematical constant that is the ratio of the circumference of a circle to its diameter. The numerical value is approximately *3.14159*.",
    "categories": [
      "math > constants",
      "math > trigonometric"
    ],
    "parameters": {},
    "returns": {
      "description": "Returns the numerical value of Pi.",
      "schema": {
        "type": "number"
      }
    },
    "examples": [
      {
        "title": "Test for sin(π) = 0",
        "process_graph": {
          "pi1": {
            "process_id": "pi",
            "arguments": {}
          },
          "sin1": {
            "process_id": "sin",
            "arguments": {
              "data": {
                "from_node": "pi1"
              }
            },
            "result": true
          }
        },
        "returns": 0
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/Pi.html",
        "title": "Mathematical constant Pi explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "power",
    "summary": "Exponentiation",
    "description": "Computes the exponentiation for the base `base` raised to the power of `p`.\n\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.",
    "categories": [
      "math",
      "math > exponential & logarithmic"
    ],
    "parameter_order": [
      "base",
      "p"
    ],
    "parameters": {
      "base": {
        "description": "The numerical base.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      },
      "p": {
        "description": "The numerical exponent.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed value for `base` raised to the power of `p`.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "base": 0,
          "p": 2
        },
        "returns": 0
      },
      {
        "arguments": {
          "base": 2.5,
          "p": 0
        },
        "returns": 1
      },
      {
        "arguments": {
          "base": 3,
          "p": 3
        },
        "returns": 27
      },
      {
        "arguments": {
          "base": 5,
          "p": -1
        },
        "returns": 0.2
      },
      {
        "arguments": {
          "base": 1,
          "p": 0.5
        },
        "returns": 1
      },
      {
        "arguments": {
          "base": 1,
          "p": null
        },
        "returns": null
      },
      {
        "arguments": {
          "base": null,
          "p": 2
        },
        "returns": null
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/Power.html",
        "title": "Power explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "product",
    "summary": "product of all elements",
    "description": "product of all elements",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "property",
    "summary": "Retrieve data attributes",
    "description": "Get information about data attributes in a data cube. Useful to filter data in data cubes.",
    "categories": [
      "cubes"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "description": "Any data type is allowed."
        },
        "required": true
      },
      "name": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "description": "Any data type is allowed."
      }
    }
  },
  {
    "id": "quantiles",
    "summary": "Calculates quantiles",
    "description": "Calculates quantiles for each specified `quantiles` between 0 and 1.",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "quantiles": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    }
  },
  {
    "id": "rearrange",
    "summary": "Rearranges an array based on a permutation.",
    "description": "Rearranges an array based on a permutation.",
    "categories": [
      "arrays",
      "sorting"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "description": "Any data type is allowed."
          }
        },
        "required": true
      },
      "order": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "description": "Any data type is allowed."
        }
      }
    }
  },
  {
    "id": "reduce",
    "summary": "reduce dimensions - lower dimensionality, same resolution.",
    "description": "reduce dimensions - lower dimensionality, same resolution.",
    "categories": [
      "cubes",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "reducer": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      },
      "dimension": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "resample_spatial",
    "summary": "Resample spatial dimension",
    "description": "Resample spatial dimension",
    "categories": [
      "cubes",
      "aggregate"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "method": {
        "description": "",
        "schema": {
          "type": "string",
          "default": null
        }
      },
      "target": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "resample_temporal",
    "summary": "Resample the temporal dimension",
    "description": "If dimension is not set, the data cube is expected to have only one temporal dimension.",
    "categories": [
      "cubes",
      "aggregate"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "method": {
        "description": "",
        "schema": {
          "type": "string",
          "default": null
        }
      },
      "target": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "dimension": {
        "description": "",
        "schema": {
          "type": "string"
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "round",
    "summary": "Rounds to a specified precision",
    "description": "Rounds a real number `x` to specified precision `p`.\n\nIf the fractional part of `x` is halfway between two integers, one of which is even and the other odd, then the even number is returned.\nThis behavior follows [IEEE Standard 754](https://ieeexplore.ieee.org/document/4610935). This kind of rounding is also called \"rounding to nearest\" or \"banker's rounding\". It minimizes rounding errors that result from consistently rounding a midpoint value in a single direction.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > rounding"
    ],
    "parameter_order": [
      "x",
      "p"
    ],
    "parameters": {
      "x": {
        "description": "A number to round.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      },
      "p": {
        "description": "A positive number specifies the number of digits after the decimal point to round to. A negative number means rounding to a power of ten, so for example *-2* rounds to the nearest hundred. Defaults to *0*.",
        "schema": {
          "type": "integer",
          "default": 0
        }
      }
    },
    "returns": {
      "description": "The rounded number.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      },
      {
        "arguments": {
          "x": 3.56,
          "p": 1
        },
        "returns": 3.6
      },
      {
        "arguments": {
          "x": -0.4444444,
          "p": 2
        },
        "returns": -0.44
      },
      {
        "arguments": {
          "x": -2.5
        },
        "returns": -2
      },
      {
        "arguments": {
          "x": -3.5
        },
        "returns": -4
      },
      {
        "arguments": {
          "x": 1234.5,
          "p": -2
        },
        "returns": 1200
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/AbsoluteValue.html",
        "title": "Absolute value explained by Wolfram MathWorld"
      },
      {
        "rel": "about",
        "href": "https://ieeexplore.ieee.org/document/4610935",
        "title": "IEEE Standard 754-2008 for Floating-Point Arithmetic"
      }
    ]
  },
  {
    "id": "run_udf_container",
    "summary": "Runs an externally hosted UDF container that follows the openEO UDF specification.",
    "description": "Runs an externally hosted UDF container that follows the openEO UDF specification.",
    "categories": [
      "import",
      "udf"
    ],
    "parameters": {
      "url": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "options": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "callback"
      }
    }
  },
  {
    "id": "run_udf",
    "summary": "Runs user submitted code as UDF",
    "description": "Runs user submitted code as UDF",
    "categories": [
      "import",
      "udf"
    ],
    "parameters": {
      "code": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "runtime_identifier": {
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "options": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "callback"
      }
    }
  },
  {
    "id": "sd",
    "summary": "Calculate sample standard deviation",
    "description": "Calculate sample standard deviation",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "sgn",
    "summary": "Signum",
    "description": "The signum (also known as *sign*) of `x` is defined as:\n* *1* if *x > 0*\n* *0* if *x = 0*\n* *-1* if *x < 0*\n\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math"
    ],
    "parameters": {
      "x": {
        "description": "A number.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed signum value of `x`.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": -2
        },
        "returns": -1
      },
      {
        "arguments": {
          "x": 3.5
        },
        "returns": 1
      },
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      },
      {
        "arguments": {
          "x": null
        },
        "returns": null
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/Sign.html",
        "title": "Sign explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "sin",
    "summary": "Sine",
    "description": "Computes the sine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "x": {
        "description": "An angle in radians.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed sine of `x`.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/Sine.html",
        "title": "Sine explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "sinh",
    "summary": "Hyperbolic sine",
    "description": "Computes the hyperbolic sine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "x": {
        "description": "An angle in radians.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed hyperbolic sine of `x`.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/HyperbolicSine.html",
        "title": "Hyperbolic sine explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "sort",
    "summary": "Sort data",
    "description": "Sorts `data` into ascending (default) or descending order. Removes no-data values. Basically an alias to rearrange()",
    "categories": [
      "arrays",
      "sorting"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "asc": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    }
  },
  {
    "id": "sqrt",
    "summary": "Square root",
    "description": "Computes the square root of a real number `x`. This process is an alias for `x` to the power of *0.5*: `power(x, 0.5)`.\n\nA square root of x is a number a such that *a^2^ = x*. Therefore, the square root is the inverse function of a to the power of 2, but only for *a >= 0*.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math",
      "math > exponential & logarithmic"
    ],
    "parameters": {
      "x": {
        "description": "A number.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed square root.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      },
      {
        "arguments": {
          "x": 1
        },
        "returns": 1
      },
      {
        "arguments": {
          "x": 9
        },
        "returns": 3
      },
      {
        "arguments": {
          "x": null
        },
        "returns": null
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/SquareRoot.html",
        "title": "Square root explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "sum",
    "summary": "sum of all elements",
    "description": "sum of all elements",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "tan",
    "summary": "Tangent",
    "description": "Computes the tangent of `x`. The tangent is defined to be the sine of x divided by the cosine of x.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "x": {
        "description": "An angle in radians.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed tangent of `x`.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/Tangent.html",
        "title": "Tangent explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "tanh",
    "summary": "Hyperbolic tangent",
    "description": "Computes the hyperbolic tangent of `x`. The tangent is defined to be the hyperbolic sine of x divided by the hyperbolic cosine of x.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "x": {
        "description": "An angle in radians.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "The computed hyperbolic tangent of `x`.",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "x": 0
        },
        "returns": 0
      }
    ],
    "links": [
      {
        "rel": "about",
        "href": "http://mathworld.wolfram.com/HyperbolicTangent.html",
        "title": "Hyperbolic tangent explained by Wolfram MathWorld"
      }
    ]
  },
  {
    "id": "text_begins",
    "summary": "Text begins with another text",
    "description": "Checks whether the text (also known as *string*) specified for `data` contains the text specified for `pattern` at the very beginning. Both are expected to be encoded in UTF-8 by default. Regular expressions are not supported.",
    "categories": [
      "texts",
      "comparison"
    ],
    "parameter_order": [
      "data",
      "pattern",
      "case_sensitive"
    ],
    "parameters": {
      "data": {
        "description": "Text in which to find something at the beginning.",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "pattern": {
        "description": "Text to find at the beginning of `data`.",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "case_sensitive": {
        "description": "Case sensitive comparison can be disabled by setting this parameter to `false`.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "Returns `true` if `data` begins with `pattern`, false` otherwise.",
      "schema": {
        "type": "boolean"
      }
    },
    "examples": [
      {
        "arguments": {
          "data": "Lorem ipsum dolor sit amet",
          "pattern": "amet"
        },
        "returns": false
      },
      {
        "arguments": {
          "data": "Lorem ipsum dolor sit amet",
          "pattern": "Lorem"
        },
        "returns": true
      },
      {
        "arguments": {
          "data": "Lorem ipsum dolor sit amet",
          "pattern": "lorem"
        },
        "returns": false
      },
      {
        "arguments": {
          "data": "Lorem ipsum dolor sit amet",
          "pattern": "lorem",
          "case_sensitive": false
        },
        "returns": true
      },
      {
        "arguments": {
          "data": "Ä",
          "pattern": "ä",
          "case_sensitive": false
        },
        "returns": true
      }
    ]
  },
  {
    "id": "text_contains",
    "summary": "Text contains another text",
    "description": "Checks whether the text (also known as *string*) specified for `data` contains the text specified for `pattern`. Both are expected to be encoded in UTF-8 by default. Regular expressions are not supported.",
    "categories": [
      "texts",
      "comparison"
    ],
    "parameter_order": [
      "data",
      "pattern",
      "case_sensitive"
    ],
    "parameters": {
      "data": {
        "description": "Text in which to find something in.",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "pattern": {
        "description": "Text to find in `data`.",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "case_sensitive": {
        "description": "Case sensitive comparison can be disabled by setting this parameter to `false`.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "Returns `true` if `data` contains the `pattern`, false` otherwise.",
      "schema": {
        "type": "boolean"
      }
    },
    "examples": [
      {
        "arguments": {
          "data": "Lorem ipsum dolor sit amet",
          "pattern": "openEO"
        },
        "returns": false
      },
      {
        "arguments": {
          "data": "Lorem ipsum dolor sit amet",
          "pattern": "ipsum dolor"
        },
        "returns": true
      },
      {
        "arguments": {
          "data": "Lorem ipsum dolor sit amet",
          "pattern": "Ipsum Dolor"
        },
        "returns": false
      },
      {
        "arguments": {
          "data": "Lorem ipsum dolor sit amet",
          "pattern": "SIT",
          "case_sensitive": false
        },
        "returns": true
      },
      {
        "arguments": {
          "data": "ÄÖÜ",
          "pattern": "ö",
          "case_sensitive": false
        },
        "returns": true
      }
    ]
  },
  {
    "id": "text_ends",
    "summary": "Text ends with another text",
    "description": "Checks whether the text (also known as *string*) specified for `data` contains the text specified for `pattern` at the very end. Both are expected to be encoded in UTF-8 by default. Regular expressions are not supported.",
    "categories": [
      "texts",
      "comparison"
    ],
    "parameter_order": [
      "data",
      "pattern",
      "case_sensitive"
    ],
    "parameters": {
      "data": {
        "description": "Text in which to find something at the end.",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "pattern": {
        "description": "Text to find at the end of `data`.",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "case_sensitive": {
        "description": "Case sensitive comparison can be disabled by setting this parameter to `false`.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "Returns `true` if `data` ends with `pattern`, false` otherwise.",
      "schema": {
        "type": "boolean"
      }
    },
    "examples": [
      {
        "arguments": {
          "data": "Lorem ipsum dolor sit amet",
          "pattern": "amet"
        },
        "returns": true
      },
      {
        "arguments": {
          "data": "Lorem ipsum dolor sit amet",
          "pattern": "AMET"
        },
        "returns": false
      },
      {
        "arguments": {
          "data": "Lorem ipsum dolor sit amet",
          "pattern": "Lorem"
        },
        "returns": false
      },
      {
        "arguments": {
          "data": "Lorem ipsum dolor sit amet",
          "pattern": "AMET",
          "case_sensitive": false
        },
        "returns": true
      },
      {
        "arguments": {
          "data": "Ä",
          "pattern": "ä",
          "case_sensitive": false
        },
        "returns": true
      }
    ]
  },
  {
    "id": "trim",
    "summary": "Removes slices with no-data.",
    "description": "Alias. If the dimension is irregular categorical then slices in the middle can be removed.",
    "categories": [
      "cubes"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "var",
    "summary": "Calculate sample variance",
    "description": "Calculate sample variance",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "weighted_filter",
    "summary": "Weighted filter for imagery",
    "description": "Weighted raster filter",
    "categories": [
      "math > image filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "raster-cube"
        },
        "required": true
      },
      "weights": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "raster-cube"
      }
    }
  },
  {
    "id": "xor",
    "summary": "Is exactly one value true?",
    "description": "Checks if **exactly one** of the values is true. Evaluates each expression from the first to the last element and stops once the outcome is unambiguous.\n\nBy default all no-data values are ignored so that the process returns `true` if exactly one of the other values is true and otherwise returns `false`.\n\nSetting the `ignore_nodata` flag to `false` considers no-data values so that `null` is a valid logical object. If a component is `null`, the result will be `null` if the outcome is ambiguous. See the following truth table:\n\n```\n      || null | false | true\n----- || ---- | ----- | -----\nnull  || null | null  | null\nfalse || null | false | true\ntrue  || null | true  | false\n```",
    "categories": [
      "logic",
      "reducer"
    ],
    "parameters": {
      "expressions": {
        "description": "A set of boolean values.",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "Indicates whether no-data values are ignored or not and ignores them by default.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "returns": {
      "description": "Boolean result of the logical expressions.",
      "schema": {
        "type": [
          "boolean",
          "null"
        ]
      }
    },
    "examples": [
      {
        "arguments": {
          "expressions": [
            false,
            null
          ]
        },
        "returns": false
      },
      {
        "arguments": {
          "expressions": [
            true,
            null
          ]
        },
        "returns": true
      },
      {
        "arguments": {
          "expressions": [
            false,
            null
          ],
          "ignore_nodata": false
        },
        "returns": null
      },
      {
        "arguments": {
          "expressions": [
            true,
            null
          ],
          "ignore_nodata": false
        },
        "returns": null
      },
      {
        "arguments": {
          "expression": [
            true,
            false,
            true,
            false
          ]
        },
        "returns": false
      },
      {
        "arguments": {
          "expression": [
            true,
            false
          ]
        },
        "returns": true
      },
      {
        "arguments": {
          "expression": [
            false,
            false
          ]
        },
        "returns": false
      }
    ]
  }
]