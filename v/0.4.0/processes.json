[
  {
    "id": "absolute",
    "summary": "Absolute value",
    "description": "Absolute value of a real number. Nodata values get propagated as `null`.",
    "categories": [
      "math"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "add_dimension",
    "summary": "Adds a new dimension with the name in `dimension`.",
    "description": "Adds a new dimension with the name in `dimension`.",
    "categories": [
      "core"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "dimension": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "dimension_value": {
        "description": "",
        "schema": {
          "description": "Mixed values, any data type allowed."
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "aggregate_temporal",
    "summary": "Temporal aggregations",
    "description": "Computes a temporal aggregation based on a list of date/datetime ranges. Will be projected to the labels. Length of labels and groups needs to be the same. All data along the dimensions will be passed through the reducer. Calendar hierarchies such as year, month, week etc. will be transformed from the clients into groups.",
    "categories": [
      "core",
      "aggregate"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "groups": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": true
      },
      "labels": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "required": true
      },
      "reducer": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      },
      "dimension": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "aggregate_zonal",
    "summary": "Zonal statistics for polygons",
    "description": "Aggregates zonal data/statistics for one or multiple GeoJSON polygons. For focal aggregation see `apply`. Number of valid/invalid pixels get returned together with the calculated values.",
    "categories": [
      "core",
      "aggregate"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "polygons": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "format": "geojson"
          }
        },
        "required": true
      },
      "dimension": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": "object"
        }
      }
    }
  },
  {
    "id": "and",
    "summary": "Checks if all of the expressions are true",
    "description": "Given a set of logical expressions, are **all** of the values true?",
    "categories": [
      "logic"
    ],
    "parameters": {
      "expressions": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "boolean"
          }
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "apply_dimension",
    "summary": "Applies an n-ary process.",
    "description": "Applies an n-ary process to a raster image. `dimensions` are the dimensions over which to iterate, if not set all dimensions are iterated over.",
    "categories": [
      "core"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "process": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      },
      "dimensions": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "apply",
    "summary": "Applies a local/unary process to a raster image.",
    "description": "Applies a local non-reducer to an image collection. Focal calculations can be made by setting the kernel. For zonal apply see `aggregate_zonal`. Returns a new image collection. The kernel has to be as many dimensions as the datacube has dimensions.",
    "categories": [
      "core"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "process": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      },
      "kernel": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          ],
          "default": 1
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "arccos",
    "summary": "Arc cosine",
    "description": "Arc cosine of `data`. Works on radians only.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "arcosh",
    "summary": "Inverse hyperbolic cosine",
    "description": "Inverse hyperbolic cosine of `data`. Works on radians only.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "arcsin",
    "summary": "Arc sine",
    "description": "Arc sine of `data`. Works on radians only.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "arctan",
    "summary": "Arc tangent",
    "description": "Arc tangent of `data`. Works on radians only.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "arctan2",
    "summary": "Arc tangent of two numbers.",
    "description": "Arc tangent of the two numbers `y` / `x`. Works on radians only.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "y": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      },
      "x": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "arsinh",
    "summary": "Inverse hyperbolic sine",
    "description": "Inverse hyperbolic sine of `data`. Works on radians only.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "artanh",
    "summary": "Inverse hyperbolic tangent",
    "description": "Inverse hyperbolic tangent of `data`. Works on radians only.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "between",
    "summary": "data is between min and max",
    "description": "Alias for: `and([ gte( data, min ), lte( data, max ) ])`",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "min": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "max": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "ceil",
    "summary": "Round fractions up.",
    "description": "The least integer greater than or equal to the a number. Nodata values get propagated as `null`.",
    "categories": [
      "math"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "clip",
    "summary": "Clips values between minimum and maximum values.",
    "description": "Clips the image values between specified min and max values. All values larger than maximal value will have the maximal value, all values lower than minimal value will have the minimal value, alias for `replace(replace(image, gt(data, max), max), lt(data, min), min)`",
    "categories": [
      "math",
      "masks"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "min": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "max": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "cos",
    "summary": "Cosine",
    "description": "Cosine of `data`. Works on radians only.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "cosh",
    "summary": "Hyperbolic cosine",
    "description": "Hyperbolic cosine of `data`. Works on radians only.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "count",
    "summary": "Number of valid elements (see is_valid).",
    "description": "Number of valid elements (see is_valid).",
    "categories": [
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "number"
      }
    }
  },
  {
    "id": "create_collection",
    "summary": "Creates a new collection without dimensions.",
    "description": "Creates a new collection without dimensions.",
    "categories": [
      "core"
    ],
    "parameters": {},
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "image-collection"
          },
          {
            "type": "object",
            "format": "vector-collection"
          }
        ]
      }
    }
  },
  {
    "id": "cummax",
    "summary": "Cumulative maxima",
    "description": "The length of data stays the same.",
    "categories": [
      "math > cumulative"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    }
  },
  {
    "id": "cummin",
    "summary": "Cumulative mimuma",
    "description": "The length of data stays the same.",
    "categories": [
      "math > cumulative"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    }
  },
  {
    "id": "cumproduct",
    "summary": "Cumulative products",
    "description": "The length of data stays the same.",
    "categories": [
      "math > cumulative"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    }
  },
  {
    "id": "cumsum",
    "summary": "Cumulative sums.",
    "description": "The length of data stays the same.",
    "categories": [
      "math > cumulative"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    }
  },
  {
    "id": "debug",
    "summary": "Send debugging information to the client",
    "description": "Sends debugging information about the data to the client, who needs to be subscribed to the topic `openeo.jobs.debug`.",
    "categories": [
      "development"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "description": "Mixed values, any data type allowed."
        },
        "required": true
      },
      "identifier": {
        "description": "",
        "schema": {
          "type": "string"
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "divide",
    "summary": "x divided all other elements",
    "description": "x divided all other elements",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "x": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "e",
    "summary": "Euler's number (e)",
    "description": "The number *e* is a mathematical constant that is the base of the natural logarithm such that *ln(e) = 1*. Link: http://mathworld.wolfram.com/e.html",
    "categories": [
      "math > constants",
      "constants"
    ],
    "parameters": {},
    "returns": {
      "description": "",
      "schema": {
        "type": "number"
      }
    }
  },
  {
    "id": "eq",
    "summary": "data is equal to other data",
    "description": "Numbers: If `delta` is non-zero the equality of two numbers with a given delta is checked. For strings case_sensitivity can be toggled.",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "required": true
      },
      "other": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "required": true
      },
      "delta": {
        "description": "",
        "schema": {
          "type": "number",
          "default": 0
        },
        "required": false
      },
      "case_sensitive": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "exp",
    "summary": "exponential function to the base e",
    "description": "exponential function to the base e of `data`.",
    "categories": [
      "math > logarithmic"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "export",
    "summary": "Data export, compatible to GDAL/OGR.",
    "description": "Export process that is compatible to GDAL/OGR formats and options. Passes through the collection, so that further intermediate results can be exported and further calculations can be processes.",
    "categories": [
      "core",
      "export"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "object",
              "format": "image-collection"
            },
            {
              "type": "object",
              "format": "vector-collection"
            }
          ]
        },
        "required": true
      },
      "format": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "options": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "extrema",
    "summary": "Minimum and maximum values",
    "description": "Two element array containing the minimum and the maximum values of `data`. Basically an alias for `min` and `max`, but potentially faster than calling both separately.",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    }
  },
  {
    "id": "filter_bands",
    "summary": "Filters the bands in the image collection",
    "description": "The order of the bands matters!",
    "categories": [
      "core",
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "bands": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "filter_bbox",
    "summary": "Limits the data to the specified bbox.",
    "description": "Limits the data to the specified bbox.",
    "categories": [
      "core",
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "object",
              "format": "image-collection"
            },
            {
              "type": "object",
              "format": "vector-collection"
            }
          ]
        },
        "required": true
      },
      "west": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "south": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "east": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "north": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "base": {
        "description": "",
        "schema": {
          "type": "number"
        }
      },
      "height": {
        "description": "",
        "schema": {
          "type": "number"
        }
      },
      "crs": {
        "description": "",
        "schema": {
          "type": "string"
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "image-collection"
          },
          {
            "type": "object",
            "format": "vector-collection"
          }
        ]
      }
    }
  },
  {
    "id": "filter_geometry",
    "summary": "Limits the data to the specified geometry",
    "description": "Limits the data to the specified geometry",
    "categories": [
      "core",
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "object",
              "format": "image-collection"
            },
            {
              "type": "object",
              "format": "vector-collection"
            }
          ]
        },
        "required": true
      },
      "geometry": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "geojson"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "image-collection"
          },
          {
            "type": "object",
            "format": "vector-collection"
          }
        ]
      }
    }
  },
  {
    "id": "filter_temporal",
    "summary": "Limits the data to the specified date range.",
    "description": "Alias for filter() with callbacks to between_datetime(), between_date(), between_month() and between_year().",
    "categories": [
      "core",
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "object",
              "format": "image-collection"
            },
            {
              "type": "object",
              "format": "vector-collection"
            }
          ]
        },
        "required": true
      },
      "from": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "to": {
        "description": "",
        "schema": {
          "type": "string"
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "image-collection"
          },
          {
            "type": "object",
            "format": "vector-collection"
          }
        ]
      }
    }
  },
  {
    "id": "filter",
    "summary": "Filtering / Selecting data based on a logical expression",
    "description": "Example: Filter by `instrument_mode` from STAC properties.",
    "categories": [
      "core",
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "object",
              "format": "image-collection"
            },
            {
              "type": "object",
              "format": "vector-collection"
            }
          ]
        },
        "required": true
      },
      "expression": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      },
      "dimension": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "image-collection"
          },
          {
            "type": "object",
            "format": "vector-collection"
          }
        ]
      }
    }
  },
  {
    "id": "find_collection",
    "summary": "Select and load an internal collection by properties.",
    "description": "Select and load an internal collection by properties.",
    "categories": [
      "core",
      "import"
    ],
    "parameters": {
      "expression": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "image-collection"
          },
          {
            "type": "object",
            "format": "vector-collection"
          }
        ]
      }
    }
  },
  {
    "id": "first",
    "summary": "First element of nums.",
    "description": "First element of nums.",
    "categories": [
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "floor",
    "summary": "Round fractions down.",
    "description": "The greatest integer less than or equal to the a number. Nodata values get propagated as `null`.",
    "categories": [
      "math"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "frac",
    "summary": "Fractional part of a number",
    "description": "The fractional part of the real number `data`. Nodata values get propagated as `null`.",
    "categories": [
      "math"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "get_collection",
    "summary": "Load an internal collection by id",
    "description": "Load a collection from the current back-end by collection id",
    "categories": [
      "core",
      "import"
    ],
    "parameters": {
      "id": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "image-collection"
          },
          {
            "type": "object",
            "format": "vector-collection"
          }
        ]
      }
    }
  },
  {
    "id": "get_process_graph",
    "summary": "Load an internal process graph by id",
    "description": "Load a process graph from the current back-end by process graph id",
    "categories": [
      "core",
      "import"
    ],
    "parameters": {
      "id": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "variables": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object"
      }
    }
  },
  {
    "id": "get_result",
    "summary": "Load batch job results by id",
    "description": "Load internal batch job results by job id.",
    "categories": [
      "core",
      "import"
    ],
    "parameters": {
      "id": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "image-collection"
          },
          {
            "type": "object",
            "format": "vector-collection"
          }
        ]
      }
    }
  },
  {
    "id": "get_udf",
    "summary": "Load and run an internal UDF",
    "description": "Load and run an internal UDF to be executed in the context of reduce, aggregate, apply, ...",
    "categories": [
      "import",
      "udf"
    ],
    "parameters": {
      "path": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "runtime_identifier": {
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "options": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "callback"
      }
    }
  },
  {
    "id": "gt",
    "summary": "data is greater than other data",
    "description": "data is greater than other data",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "other": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "gte",
    "summary": "data is greater than or equal to other data",
    "description": "data is greater than or equal to other data",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "other": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "if",
    "summary": "Similar to an if-then-else construct.",
    "description": "Similar to an if-then-else construct.",
    "categories": [
      "filter"
    ],
    "parameters": {
      "expression": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      },
      "param1": {
        "description": "",
        "schema": {
          "description": "Mixed values, any data type allowed."
        },
        "required": true
      },
      "accept": {
        "description": "",
        "schema": {
          "description": "Mixed values, any data type allowed.",
          "default": true
        },
        "required": false
      },
      "reject": {
        "description": "",
        "schema": {
          "description": "Mixed values, any data type allowed.",
          "default": false
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "import_process_graph",
    "summary": "Load an external process graph by url",
    "description": "Load an external process graph by url",
    "categories": [
      "import"
    ],
    "parameters": {
      "url": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "variables": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object"
      }
    }
  },
  {
    "id": "import_result",
    "summary": "Load external batch job results by url",
    "description": "Load an external batch job results by url",
    "categories": [
      "import"
    ],
    "parameters": {
      "url": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "oneOf": [
          {
            "type": "object",
            "format": "image-collection"
          },
          {
            "type": "object",
            "format": "vector-collection"
          }
        ]
      }
    }
  },
  {
    "id": "import_udf",
    "summary": "Load and run an external UDF",
    "description": "Load and run an external UDF to be executed in the context of reduce, aggregate, apply, …Examples: import_udf(‘https://hub.openeo.org/udf/wur/bfast’); Maybe also just import_udf(‘hub://bfast’)",
    "categories": [
      "import",
      "udf"
    ],
    "parameters": {
      "url": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "runtime_identifier": {
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "options": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "callback"
      }
    }
  },
  {
    "id": "int",
    "summary": "Integer part of a number",
    "description": "The integer part of the real number `data`. Nodata values get propagated as `null`.",
    "categories": [
      "math"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "is_nan",
    "summary": "Checks whether data is not a number.",
    "description": "Checks whether data is not a number.",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "description": "Mixed values, any data type allowed."
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "is_nodata",
    "summary": "Checks for missing data",
    "description": "Checks whether the specified data is missing data, i.e. equals to one of the nodata values or null.",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "description": "Mixed values, any data type allowed."
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "is_valid",
    "summary": "Checks for valid data",
    "description": "Checks whether the data is a non-missing and finite number.",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "description": "Mixed values, any data type allowed."
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "last",
    "summary": "Last element of nums.",
    "description": "Last element of nums.",
    "categories": [
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "linear_scale_range",
    "summary": "Performs a linear transformation between the input and output range.",
    "description": "Performs a linear transformation between the input and output range.",
    "categories": [
      "math"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      },
      "inputMin": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "inputMax": {
        "description": "",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "outputMin": {
        "description": "",
        "schema": {
          "type": "number",
          "default": 0
        },
        "required": false
      },
      "outputMax": {
        "description": "",
        "schema": {
          "type": "number",
          "default": 1
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "list_contains",
    "summary": "Array contains the specified element",
    "description": "Array contains the specified element",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "description": "Mixed values, any data type allowed."
          }
        },
        "required": true
      },
      "element": {
        "description": "",
        "schema": {
          "description": "Mixed values, any data type allowed."
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "list_value",
    "summary": "Value of the element at the specified index.",
    "description": "Value of the element at the specified index.",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "description": "Mixed values, any data type allowed."
          }
        },
        "required": true
      },
      "index": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "description": "Mixed values, any data type allowed."
      }
    }
  },
  {
    "id": "ln",
    "summary": "Natural logarithm",
    "description": "Natural logarithm, i.e. logarithm to the base e of `data`.",
    "categories": [
      "math > logarithmic"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "log",
    "summary": "logarithm of data to the specified base",
    "description": "logarithm to the base `base` of `data`.",
    "categories": [
      "math > logarithmic"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      },
      "base": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "lt",
    "summary": "data is less than other data.",
    "description": "data is less than other data.",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "other": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "lte",
    "summary": "data is less than or equal to other data",
    "description": "data is less than or equal to other data",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      },
      "other": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "string",
              "format": "time"
            }
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "mask",
    "summary": "Apply a mask.",
    "description": "Compares the parallel elements and replaces all non-zero or true elements with `replacement`. Defaults to null/nodata.",
    "categories": [
      "masks"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "mask": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "replacement": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "max",
    "summary": "Maximum value",
    "description": "Maximum value",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "mean",
    "summary": "Arithmetic mean (average)",
    "description": "Arithmetic mean (average)",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "median",
    "summary": "Median",
    "description": "alias for: `quantiles(data, 0.5)`",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "merge_collections",
    "summary": "Merging two collections",
    "description": "The collections have to be compatible. Is the inverse of a split if there is no overlap. If data overlaps the overlap resolver must be specified to resolve the overlap. Doesn’t add dimensions.",
    "categories": [
      "core"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "other": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "overlap_resolver": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "min",
    "summary": "Minimum value",
    "description": "Minimum value",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "minus",
    "summary": "x minus all other elements",
    "description": "x minus all other elements",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "x": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "mod",
    "summary": "Modulo",
    "description": "Remainder after division of x by y. Nodata values get propagated as `null`.",
    "categories": [
      "math"
    ],
    "parameters": {
      "x": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      },
      "y": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "NDVI",
    "summary": "Normalized Difference Vegetation Index",
    "description": "Alias for `normalized_difference`, which determines the bands automatically based on common_names (“red”/”nir”). Bands are replaced.",
    "categories": [
      "math > indices",
      "vegetation_indices"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "neq",
    "summary": "data is not equal to other data",
    "description": "Alias for: `not(eq(val1, val2))`. Numbers: If `delta` is non-zero the equality of two numbers with a given delta is checked. For strings case_sensitivity can be toggled.",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "required": true
      },
      "other": {
        "description": "",
        "schema": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "required": true
      },
      "delta": {
        "description": "",
        "schema": {
          "type": "number",
          "default": 0
        },
        "required": false
      },
      "case_sensitive": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "normalized_difference",
    "summary": "Normalized difference between between two bands.",
    "description": "Computes the normalized difference between two bands. The normalized difference is computed as (band1 − band2) / (band1 + band2). Bands are replaced.",
    "categories": [
      "math > indices",
      "vegetation_indices"
    ],
    "parameters": {
      "band1": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "band2": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "not",
    "summary": "Invert a boolean expression",
    "description": "Invert a boolean expression",
    "categories": [
      "logic"
    ],
    "parameters": {
      "expression": {
        "description": "",
        "schema": {
          "type": "boolean"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "or",
    "summary": "Checks if at least one of the expressions is true",
    "description": "Given a set of logical expressions, is **at least one** of the values true?",
    "categories": [
      "logic"
    ],
    "parameters": {
      "expressions": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "boolean"
          }
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "order",
    "summary": "Returns a permutation for sorting.",
    "description": "Computes a permutation which allows rearranging the data into ascending or descending order. Ties will be left in their original ordering.",
    "categories": [
      "sorting"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": true
      },
      "asc": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": "integer"
        }
      }
    }
  },
  {
    "id": "output",
    "summary": "Output information to the client",
    "description": "Outputs the data to the client, who needs to be subscribed to the topic `openeo.jobs.output`.",
    "categories": [
      "development"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "description": "Mixed values, any data type allowed."
        },
        "required": true
      },
      "identifier": {
        "description": "",
        "schema": {
          "type": "string"
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "pi",
    "summary": "Pi (π)",
    "description": "Ratio of the circumference of a circle to its diameter.",
    "categories": [
      "math > constants",
      "constants"
    ],
    "parameters": {},
    "returns": {
      "description": "",
      "schema": {
        "type": "number"
      }
    }
  },
  {
    "id": "power",
    "summary": "Exponentiation",
    "description": "Calculates `data` to the power of `p`. Nodata values get propagated as `null`.",
    "categories": [
      "math"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      },
      "p": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "product",
    "summary": "product of all elements",
    "description": "product of all elements",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "property",
    "summary": "Retrieve metadata",
    "description": "Get information about a collection of attributes for data in a collection. Useful for filtering collections and data in collections.",
    "categories": [
      "core"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "description": "Mixed values, any data type allowed."
        },
        "required": true
      },
      "name": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "description": "Mixed values, any data type allowed."
      }
    }
  },
  {
    "id": "quantiles",
    "summary": "Calculates quantiles",
    "description": "Calculates quantiles for each specified `quantiles` between 0 and 1.",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "quantiles": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    }
  },
  {
    "id": "rearrange",
    "summary": "Rearranges a list based on a permutation.",
    "description": "Rearranges a list based on a permutation.",
    "categories": [
      "sorting"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "description": "Mixed values, any data type allowed."
          }
        },
        "required": true
      },
      "order": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "description": "Mixed values, any data type allowed."
        }
      }
    }
  },
  {
    "id": "reduce",
    "summary": "reduce dimensions - lower dimensionality, same resolution.",
    "description": "reduce dimensions - lower dimensionality, same resolution.",
    "categories": [
      "core",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "reducer": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "callback"
        },
        "required": true
      },
      "dimension": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "resample_spatial",
    "summary": "Resample spatial dimension",
    "description": "Resample spatial dimension",
    "categories": [
      "core",
      "aggregate"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "method": {
        "description": "",
        "schema": {
          "type": "string",
          "default": null
        },
        "required": false
      },
      "target": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "resample_temporal",
    "summary": "resample temporal dimension",
    "description": "if dimension is not set, the collection is expected to have only one temporal simension.",
    "categories": [
      "core",
      "aggregate"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "method": {
        "description": "",
        "schema": {
          "type": "string",
          "default": null
        },
        "required": false
      },
      "target": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      },
      "dimension": {
        "description": "",
        "schema": {
          "type": "string"
        }
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "round",
    "summary": "Rounds `data` to specified precision `p`. Nodata values get propagated as `null`.",
    "description": "Rounds `data` to specified precision `p`. Nodata values get propagated as `null`.",
    "categories": [
      "math"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      },
      "p": {
        "description": "",
        "schema": {
          "type": "integer"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "run_udf_container",
    "summary": "Runs an externally hosted UDF container that follows the openEO UDF specification.",
    "description": "Runs an externally hosted UDF container that follows the openEO UDF specification.",
    "categories": [
      "import",
      "udf"
    ],
    "parameters": {
      "url": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "options": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "callback"
      }
    }
  },
  {
    "id": "run_udf",
    "summary": "Runs user submitted code as UDF",
    "description": "Runs user submitted code as UDF",
    "categories": [
      "import",
      "udf"
    ],
    "parameters": {
      "code": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "runtime_identifier": {
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "options": {
        "description": "",
        "schema": {
          "type": "object",
          "default": {}
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "callback"
      }
    }
  },
  {
    "id": "sd",
    "summary": "Calculate sample standard deviation",
    "description": "Calculate sample standard deviation",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "sgn",
    "summary": "Signum",
    "description": "Signum of `data`: 1 if num > 0, 0 if num = 0, -1 if num < 0. Nodata values get propagated as `null`.",
    "categories": [
      "math"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "sin",
    "summary": "Sine",
    "description": "Sine of `data`. Works on radians only.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "sinh",
    "summary": "Hyperbolic sine",
    "description": "Hyperbolic sine of `data`. Works on radians only.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "sort",
    "summary": "Sort data",
    "description": "Sorts `data` into ascending (default) or descending order. Removes nodata values. Basically an alias to rearrange()",
    "categories": [
      "sorting"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "asc": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": [
            "number",
            "null"
          ]
        }
      }
    }
  },
  {
    "id": "sqrt",
    "summary": "Square root",
    "description": "Square root of a real number, alias for `power(data, 0.5)`. Nodata values get propagated as `null`.",
    "categories": [
      "math"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "sum",
    "summary": "sum of all elements",
    "description": "sum of all elements",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "tan",
    "summary": "Tangent",
    "description": "Tangent of `data`. Works on radians only.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "tanh",
    "summary": "Hyperbolic tangent",
    "description": "Hyperbolic tangent of `data`. Works on radians only.",
    "categories": [
      "math > trigonometric"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "text_begins",
    "summary": "Text begins with another text",
    "description": "Text begins with another text",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "pattern": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "case_sensitive": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "text_contains",
    "summary": "Text contains another text",
    "description": "Text contains another text",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "pattern": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "case_sensitive": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "text_ends",
    "summary": "Text ends with another text",
    "description": "Text ends with another text",
    "categories": [
      "filter"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "pattern": {
        "description": "",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "case_sensitive": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  },
  {
    "id": "trim",
    "summary": "Removes slices with nodata.",
    "description": "Alias. If the dimension is irregular categorical then slices in the middle can be removed.",
    "categories": [
      "core"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "object",
          "format": "image-collection"
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "object",
        "format": "image-collection"
      }
    }
  },
  {
    "id": "var",
    "summary": "Calculate sample variance",
    "description": "Calculate sample variance",
    "categories": [
      "math",
      "reducer"
    ],
    "parameters": {
      "data": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": true
      },
      "ignore_nodata": {
        "description": "",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": [
          "number",
          "null"
        ]
      }
    }
  },
  {
    "id": "xor",
    "summary": "Checks if exactly one of the expressions is true",
    "description": "Given a set of logical expressions, is **exactly one** of the values true?",
    "categories": [
      "logic"
    ],
    "parameters": {
      "expressions": {
        "description": "",
        "schema": {
          "type": "array",
          "items": {
            "type": "boolean"
          }
        },
        "required": true
      }
    },
    "returns": {
      "description": "",
      "schema": {
        "type": "boolean"
      }
    }
  }
]